{
  "version": 3,
  "sources": ["../utils.ts", "../config.ts"],
  "sourcesContent": ["/**\n * Creates a new element.\n *\n * @param tagName The tag name of the element to create.\n * @param attributes The attributes to set on the element.\n */\nexport const createElement = (\n  tagName: string,\n  attributes: Record<string, string> = {},\n): HTMLElement => {\n  const el = document.createElement(tagName);\n\n  const attr = Object.assign({}, attributes);\n  if (attr.html) {\n    el.innerHTML = attr.html;\n    delete attr.html;\n  }\n\n  const keys = Object.keys(attr);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = attr[key];\n    el.setAttribute(key, value);\n  }\n\n  return el;\n};\n\ntype Primitive = string | File;\ntype FormValue = Primitive | Primitive[];\ntype FormObject = Record<string, FormValue>;\n\n/**\n * Serializes a form into a FormData object.\n *\n * @param form The form to serialize.\n */\nexport function formValuesAll(form: HTMLFormElement): FormObject {\n  const fd = new FormData(form);\n  const obj: FormObject = {};\n  // De-duplicate keys, then decide single vs array\n  for (const name of new Set(fd.keys() as Iterable<string>)) {\n    const all = fd.getAll(name); // (string | File)[]\n    obj[name] = all.length > 1 ? all : all[0]!;\n  }\n\n  return obj;\n}\n", "import { Message, MessageInput } from './@types/Message';\nimport { formValuesAll } from './utils';\n\n(async () => {\n  const { ApiClient, Dashboard } = window;\n\n  class HomeMessageConfig {\n    /**\n     * The messages.\n     */\n    private messages: Message[] = [];\n\n    /**\n     * Initializes a new instance of the HomeMessageConfig class.\n     */\n    constructor() {\n      const form = document.getElementById('home-message-form') as HTMLFormElement;\n      form.addEventListener('submit', this.saveConfig);\n    }\n\n    /**\n     * Loads the configuration from the server.\n     */\n    public loadConfig = () => {\n      Dashboard.showLoadingMsg();\n\n      const url = ApiClient.getUrl(`HomeMessage/config`);\n      ApiClient.getJSON<Message[]>(url)\n        .then((messages: Message[]) => {\n          this.messages = messages;\n        })\n        .catch((error: any) => {\n          console.error(error);\n        })\n        .finally(() => {\n          Dashboard.hideLoadingMsg();\n        });\n    };\n\n    /**\n     * Saves the configuration to the server.\n     */\n    public saveConfig = (e: Event) => {\n      e.preventDefault();\n\n      Dashboard.showLoadingMsg();\n\n      const form = e.currentTarget as HTMLFormElement;\n      const values = formValuesAll(form);\n      const message: MessageInput = {\n        Title: (values.title || '').toString(),\n        Text: (values.message || '').toString(),\n        BgColor: (values.bgColor || '').toString(),\n        TextColor: (values.textColor || '').toString(),\n        Dismissible: (values.dismissible && values.dismissible) === 'on',\n        TimeStart: null,\n        TimeEnd: null,\n      };\n\n      const url = ApiClient.getUrl(`HomeMessage/config`);\n      ApiClient.ajax({\n        type: 'POST',\n        url,\n        data: JSON.stringify(message),\n        contentType: 'application/json',\n      })\n        .then(Dashboard.processPluginConfigurationUpdateResult)\n        .then(() => {\n          form.reset();\n        })\n        .catch((error: any) => {\n          console.error(error);\n        })\n        .finally(() => {\n          Dashboard.hideLoadingMsg();\n        });\n    };\n  }\n\n  const config = new HomeMessageConfig();\n  config.loadConfig();\n})();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCO,WAAS,cAAc,MAAmC;AAC/D,UAAM,KAAK,IAAI,SAAS,IAAI;AAC5B,UAAM,MAAkB,CAAC;AAEzB,eAAW,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAqB,GAAG;AACzD,YAAM,MAAM,GAAG,OAAO,IAAI;AAC1B,UAAI,IAAI,IAAI,IAAI,SAAS,IAAI,MAAM,IAAI,CAAC;AAAA,IAC1C;AAEA,WAAO;AAAA,EACT;AA/CA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AACA;AAEA,OAAC,MAAY;AACX,cAAM,EAAE,WAAW,UAAU,IAAI;AAAA,QAEjC,MAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA,UAStB,cAAc;AALd;AAAA;AAAA;AAAA,iBAAQ,WAAsB,CAAC;AAa/B;AAAA;AAAA;AAAA,iBAAO,aAAa,MAAM;AACxB,wBAAU,eAAe;AAEzB,oBAAM,MAAM,UAAU,OAAO,oBAAoB;AACjD,wBAAU,QAAmB,GAAG,EAC7B,KAAK,CAAC,aAAwB;AAC7B,qBAAK,WAAW;AAAA,cAClB,CAAC,EACA,MAAM,CAAC,UAAe;AACrB,wBAAQ,MAAM,KAAK;AAAA,cACrB,CAAC,EACA,QAAQ,MAAM;AACb,0BAAU,eAAe;AAAA,cAC3B,CAAC;AAAA,YACL;AAKA;AAAA;AAAA;AAAA,iBAAO,aAAa,CAAC,MAAa;AAChC,gBAAE,eAAe;AAEjB,wBAAU,eAAe;AAEzB,oBAAM,OAAO,EAAE;AACf,oBAAM,SAAS,cAAc,IAAI;AACjC,oBAAM,UAAwB;AAAA,gBAC5B,QAAQ,OAAO,SAAS,IAAI,SAAS;AAAA,gBACrC,OAAO,OAAO,WAAW,IAAI,SAAS;AAAA,gBACtC,UAAU,OAAO,WAAW,IAAI,SAAS;AAAA,gBACzC,YAAY,OAAO,aAAa,IAAI,SAAS;AAAA,gBAC7C,cAAc,OAAO,eAAe,OAAO,iBAAiB;AAAA,gBAC5D,WAAW;AAAA,gBACX,SAAS;AAAA,cACX;AAEA,oBAAM,MAAM,UAAU,OAAO,oBAAoB;AACjD,wBAAU,KAAK;AAAA,gBACb,MAAM;AAAA,gBACN;AAAA,gBACA,MAAM,KAAK,UAAU,OAAO;AAAA,gBAC5B,aAAa;AAAA,cACf,CAAC,EACE,KAAK,UAAU,sCAAsC,EACrD,KAAK,MAAM;AACV,qBAAK,MAAM;AAAA,cACb,CAAC,EACA,MAAM,CAAC,UAAe;AACrB,wBAAQ,MAAM,KAAK;AAAA,cACrB,CAAC,EACA,QAAQ,MAAM;AACb,0BAAU,eAAe;AAAA,cAC3B,CAAC;AAAA,YACL;AA5DE,kBAAM,OAAO,SAAS,eAAe,mBAAmB;AACxD,iBAAK,iBAAiB,UAAU,KAAK,UAAU;AAAA,UACjD;AAAA,QA2DF;AAEA,cAAM,SAAS,IAAI,kBAAkB;AACrC,eAAO,WAAW;AAAA,MACpB,IAAG;AAAA;AAAA;",
  "names": []
}
