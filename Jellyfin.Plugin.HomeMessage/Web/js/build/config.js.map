{
  "version": 3,
  "sources": ["../utils.ts", "../config.ts"],
  "sourcesContent": ["/**\n * Creates a new element.\n *\n * @param tagName The tag name of the element to create.\n * @param attributes The attributes to set on the element.\n */\nexport const createElement = (\n  tagName: string,\n  attributes: Record<string, string> = {},\n): HTMLElement => {\n  const el = document.createElement(tagName);\n\n  const attr = Object.assign({}, attributes);\n  if (attr.html) {\n    el.innerHTML = attr.html;\n    delete attr.html;\n  }\n\n  const keys = Object.keys(attr);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = attr[key];\n    el.setAttribute(key, value);\n  }\n\n  return el;\n};\n\ntype Primitive = string | File;\ntype FormValue = Primitive | Primitive[];\ntype FormObject = Record<string, FormValue>;\n\n/**\n * Serializes a form into a FormData object.\n *\n * @param form The form to serialize.\n */\nexport function formValuesAll(form: HTMLFormElement): FormObject {\n  const fd = new FormData(form);\n  const obj: FormObject = {};\n  // De-duplicate keys, then decide single vs array\n  for (const name of new Set(fd.keys() as Iterable<string>)) {\n    const all = fd.getAll(name); // (string | File)[]\n    obj[name] = all.length > 1 ? all : all[0]!;\n  }\n\n  return obj;\n}\n\n/**\n * Sets the inner HTML of an element.\n *\n * @param el The element.\n * @param html The HTML to set.\n */\nexport function setHTML(el: HTMLElement | null, html: string) {\n  if (!el) {\n    return;\n  }\n\n  el.innerHTML = html;\n}\n\n/**\n * Sets the value of an input element.\n *\n * @param el The form element.\n * @param value The value to set.\n */\nexport function setValue(el: HTMLInputElement | HTMLSelectElement | null, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.value = value;\n}\n\n/**\n * Sets the checked state of an input element.\n *\n * @param el The form element.\n * @param checked The value to set.\n */\nexport function setChecked(el: HTMLInputElement | null, checked: boolean) {\n  if (!el) {\n    return;\n  }\n\n  el.checked = checked;\n}\n\n/**\n * Sets the value of an attribute on an element.\n *\n * @param el The element.\n * @param name The attribute name.\n * @param value The value to set.\n */\nexport function setAttribute(el: HTMLElement | null, name: string, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.setAttribute(name, value);\n}\n", "import { Message, MessageInput } from './@types/Message';\nimport { formValuesAll, setHTML, setValue, setChecked, setAttribute } from './utils';\n\n(async () => {\n  // @ts-ignore\n  const { ApiClient, Dashboard } = window;\n\n  /**\n   * The configuration page.\n   *\n   * @see https://github.com/jellyfin-archive/jellyfin-apiclient-javascript\n   * @see https://github.com/jellyfin/jellyfin-web/blob/808ece5db48b40bcf841e99c96adf5b8213d77e3/src/utils/dashboard.js#L236\n   */\n  class HomeMessageConfig {\n    /**\n     * The messages.\n     */\n    private messages: Message[] = [];\n\n    /**\n     * The form.\n     */\n    private form!: HTMLFormElement;\n\n    /**\n     * The recent background colors list.\n     */\n    private recentBackgroundColorsList!: HTMLUListElement;\n\n    /**\n     * The recent text colors list.\n     */\n    private recentTextColorsList!: HTMLUListElement;\n\n    /**\n     * Initializes a new instance of the HomeMessageConfig class.\n     */\n    constructor() {\n      this.recentBackgroundColorsList = document.getElementById(\n        'home-message-config-recent-colors-list-bg',\n      ) as HTMLUListElement;\n      this.recentTextColorsList = document.getElementById(\n        'home-message-config-recent-colors-list-text',\n      ) as HTMLUListElement;\n      this.form = document.getElementById('home-message-config-form') as HTMLFormElement;\n      this.form.addEventListener('submit', this.saveMessage);\n      this.resetForm();\n    }\n\n    /**\n     * Loads the existing messages from the server.\n     */\n    public loadMessages = () => {\n      this.ajax('GET', 'config/messages').then((messages: Message[]) => {\n        this.messages = messages;\n        this.renderMessages();\n        this.renderRecentColors();\n      });\n    };\n\n    /**\n     * Saves the configuration to the server.\n     */\n    public saveMessage = (e: Event) => {\n      e.preventDefault();\n\n      const values = formValuesAll(this.form);\n      const message: MessageInput = {\n        Title: (values.title || '').toString(),\n        Text: (values.message || '').toString(),\n        BgColor: (values.bgColor || '').toString(),\n        TextColor: (values.textColor || '').toString(),\n        Dismissible: (values.dismissible && values.dismissible) === 'on',\n        TimeStart: values.timeStart ? new Date(values.timeStart.toString()).getTime() / 1000 : null,\n        TimeEnd: values.timeEnd ? new Date(values.timeEnd.toString()).getTime() / 1000 : null,\n      };\n\n      this.saveRecentBackgroundColor(message.BgColor);\n      this.saveRecentTextColor(message.TextColor);\n\n      const isExisting = !!values.id;\n      const url = isExisting ? `config/messages/${values.id}` : 'config/messages';\n      this.ajax('POST', url, message).then(() => {\n        this.resetForm();\n        this.loadMessages();\n        Dashboard.alert(isExisting ? 'Message updated' : 'Message added');\n      });\n    };\n\n    /**\n     * Renders the messages.\n     */\n    private renderMessages = () => {\n      const template = document.getElementById('home-message-item-template') as HTMLTemplateElement;\n      const messages = document.getElementById('home-message-config-messages') as HTMLUListElement;\n      messages.innerHTML = '';\n\n      for (let i = 0; i < this.messages.length; i++) {\n        const message = this.messages[i];\n        const createdDate = new Date(message.CreatedTime * 1000);\n\n        const li = template.content.cloneNode(true) as HTMLElement;\n        setAttribute(\n          li.querySelector('.home-message-config-messages-item-body'),\n          'style',\n          `background-color: ${message.BgColor}; color: ${message.TextColor}`,\n        );\n        setAttribute(li.querySelector('[data-message-id]'), 'data-message-id', message.Id);\n        setHTML(li.querySelector('h4'), message.Title);\n        setHTML(li.querySelector('p'), message.Text);\n        setHTML(\n          li.querySelector('time'),\n          `${createdDate.toLocaleDateString()} ${createdDate.toLocaleTimeString()}`,\n        );\n        messages.appendChild(li);\n      }\n\n      const editBtns = document.getElementsByClassName(\n        'home-message-config-messages-item-heading-edit-btn',\n      ) as HTMLCollectionOf<HTMLButtonElement>;\n      for (let i = 0; i < editBtns.length; i++) {\n        const btn = editBtns[i];\n        btn.addEventListener('click', this.editMessage);\n      }\n\n      const closeBtns = document.getElementsByClassName(\n        'home-message-config-messages-item-heading-close-btn',\n      ) as HTMLCollectionOf<HTMLButtonElement>;\n      for (let i = 0; i < closeBtns.length; i++) {\n        const btn = closeBtns[i];\n        btn.addEventListener('click', this.deleteMessage);\n      }\n    };\n\n    /**\n     * Renders the recent colors.\n     */\n    private renderRecentColors = () => {\n      const backgroundColors = this.getRecentBackgroundColors();\n      const textColors = this.getRecentTextColors();\n\n      this.recentBackgroundColorsList.innerHTML = '';\n      this.recentTextColorsList.innerHTML = '';\n      for (let i = 0; i < backgroundColors.length; i++) {\n        const color = backgroundColors[i];\n        console.log(color);\n        const li = document.createElement('li');\n        li.title = 'Select color';\n        li.style.backgroundColor = color;\n        li.classList.add('home-message-config-recent-colors-item');\n        li.addEventListener('click', () => {\n          setValue(this.form.querySelector('input[name=\"bgColor\"]'), color);\n        });\n        this.recentBackgroundColorsList.appendChild(li);\n      }\n      for (let i = 0; i < textColors.length; i++) {\n        const color = textColors[i];\n        const li = document.createElement('li');\n        li.title = 'Select color';\n        li.style.backgroundColor = color;\n        li.classList.add('home-message-config-recent-colors-item');\n        li.addEventListener('click', () => {\n          setValue(this.form.querySelector('input[name=\"textColor\"]'), color);\n          this.saveRecentTextColor(color);\n        });\n        this.recentTextColorsList.appendChild(li);\n      }\n    };\n\n    /**\n     * Edits a message.\n     *\n     * @param e The event.\n     */\n    private editMessage = (e: Event) => {\n      e.preventDefault();\n\n      const btn = e.currentTarget as HTMLButtonElement;\n      const parent = btn.closest('[data-message-id]') as HTMLElement;\n      const messageId = parent?.dataset.messageId;\n      if (!messageId) {\n        return;\n      }\n      const message = this.messages.find((m) => m.Id === messageId);\n      if (!message) {\n        return;\n      }\n\n      this.resetForm();\n      const submitBtn = document.querySelector('#home-message-submit-btn span') as HTMLElement;\n      submitBtn.textContent = 'Update';\n\n      setValue(this.form.querySelector('input[name=\"id\"]'), message.Id);\n      setValue(this.form.querySelector('input[name=\"title\"]'), message.Title);\n      setValue(this.form.querySelector('textarea[name=\"message\"]'), message.Text);\n      setValue(this.form.querySelector('input[name=\"bgColor\"]'), message.BgColor);\n      setValue(this.form.querySelector('input[name=\"textColor\"]'), message.TextColor);\n      setChecked(this.form.querySelector('input[name=\"dismissible\"]'), message.Dismissible);\n\n      this.form.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n      });\n    };\n\n    /**\n     * Deletes a message.\n     *\n     * @param e The event.\n     */\n    private deleteMessage = (e: Event) => {\n      e.preventDefault();\n\n      const btn = e.currentTarget as HTMLButtonElement;\n      const parent = btn.closest('[data-message-id]') as HTMLElement;\n      const messageId = parent?.dataset.messageId;\n      if (!messageId) {\n        return;\n      }\n\n      Dashboard.confirm('Are you sure you want to delete this message?', 'Delete Message', () => {\n        this.ajax('DELETE', `config/messages/${messageId}`).then(() => {\n          this.loadMessages();\n          Dashboard.alert('Message deleted');\n        });\n      });\n    };\n\n    /**\n     * Makes an AJAX request.\n     *\n     * @param method The HTTP method to use.\n     * @param path The URL to make the request to.\n     * @param data The data to send.\n     */\n    private ajax = async (method: 'GET' | 'POST' | 'PUT' | 'DELETE', path: string, data?: any) => {\n      Dashboard.showLoadingMsg();\n      return await ApiClient.ajax({\n        type: method,\n        url: ApiClient.getUrl(`HomeMessage/${path}`),\n        dataType: 'json',\n        contentType: 'application/json; charset=utf-8',\n        data: JSON.stringify(data),\n        headers: {\n          accept: 'application/json',\n        },\n      })\n        .catch((error: any) => {\n          console.error(error);\n          Dashboard.alert(error.toString());\n        })\n        .finally(() => {\n          Dashboard.hideLoadingMsg();\n        });\n    };\n\n    /**\n     * Resets the form.\n     */\n    private resetForm = () => {\n      this.form.reset();\n      setValue(this.form.querySelector('input[name=\"bgColor\"]'), '#333333');\n      setValue(this.form.querySelector('input[name=\"textColor\"]'), '#ffffff');\n      setChecked(this.form.querySelector('input[name=\"dismissible\"]'), true);\n\n      const submitBtn = document.querySelector('#home-message-submit-btn span') as HTMLElement;\n      submitBtn.textContent = 'Add';\n    };\n\n    /**\n     * Adds a color to the list of recently used background colors.\n     *\n     * Keeps the list to a maximum of 5 colors. Does not include the same color twice.\n     *\n     * @param color The color to save.\n     */\n    private saveRecentBackgroundColor = (color: string) => {\n      const colors = localStorage.getItem('home-message-recent-background-color');\n      if (colors) {\n        const colorsList = JSON.parse(colors);\n        if (colorsList.includes(color)) {\n          return;\n        }\n\n        colorsList.unshift(color);\n        if (colorsList.length > 5) {\n          colorsList.pop();\n        }\n        localStorage.setItem('home-message-recent-background-color', JSON.stringify(colorsList));\n      } else {\n        localStorage.setItem('home-message-recent-background-color', JSON.stringify([color]));\n      }\n    };\n\n    /**\n     * Adds a color to the list of recently used text colors.\n     *\n     * Keeps the list to a maximum of 5 colors. Does not include the same color twice.\n     *\n     * @param color The color to save.\n     */\n    private saveRecentTextColor = (color: string) => {\n      const colors = localStorage.getItem('home-message-recent-text-color');\n      if (colors) {\n        const colorsList = JSON.parse(colors);\n        if (colorsList.includes(color)) {\n          return;\n        }\n\n        colorsList.unshift(color);\n        if (colorsList.length > 5) {\n          colorsList.pop();\n        }\n        localStorage.setItem('home-message-recent-text-color', JSON.stringify(colorsList));\n      } else {\n        localStorage.setItem('home-message-recent-text-color', JSON.stringify([color]));\n      }\n    };\n\n    /**\n     * Returns the list of recently used background colors.\n     */\n    private getRecentBackgroundColors = () => {\n      const colors = localStorage.getItem('home-message-recent-background-color');\n      if (colors) {\n        return JSON.parse(colors);\n      }\n      return [];\n    };\n\n    /**\n     * Returns the list of recently used text colors.\n     */\n    private getRecentTextColors = () => {\n      const colors = localStorage.getItem('home-message-recent-text-color');\n      if (colors) {\n        return JSON.parse(colors);\n      }\n      return [];\n    };\n  }\n\n  const config = new HomeMessageConfig();\n  config.loadMessages();\n})();\n"],
  "mappings": "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",
  "names": []
}
