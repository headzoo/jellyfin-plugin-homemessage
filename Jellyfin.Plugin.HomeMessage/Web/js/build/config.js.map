{
  "version": 3,
  "sources": ["../utils.ts", "../config.ts"],
  "sourcesContent": ["/**\n * Creates a new element.\n *\n * @param tagName The tag name of the element to create.\n * @param attributes The attributes to set on the element.\n */\nexport const createElement = (\n  tagName: string,\n  attributes: Record<string, string | HTMLElement[] | DocumentFragment> = {},\n): HTMLElement => {\n  const el = document.createElement(tagName);\n\n  const attr = Object.assign({}, attributes);\n  if (attr.html) {\n    setHTML(el, attr.html);\n    delete attr.html;\n  }\n\n  const keys = Object.keys(attr);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = attr[key];\n    if (typeof value === 'string') {\n      el.setAttribute(key, value);\n    }\n  }\n\n  return el;\n};\n\ntype Primitive = string | File;\ntype FormValue = Primitive | Primitive[];\ntype FormObject = Record<string, FormValue>;\n\n/**\n * Serializes a form into a FormData object.\n *\n * @param form The form to serialize.\n */\nexport function formValuesAll(form: HTMLFormElement): FormObject {\n  const fd = new FormData(form);\n  const obj: FormObject = {};\n  // De-duplicate keys, then decide single vs array\n  for (const name of new Set(fd.keys() as Iterable<string>)) {\n    const all = fd.getAll(name); // (string | File)[]\n    obj[name] = all.length > 1 ? all : all[0]!;\n  }\n\n  return obj;\n}\n\n/**\n * Sets the inner HTML of an element.\n *\n * @param el The element.\n * @param html The HTML to set.\n */\nexport function setHTML(el: HTMLElement | null, html: string | HTMLElement[] | DocumentFragment) {\n  if (!el) {\n    return;\n  }\n\n  if (typeof html === 'string') {\n    el.innerHTML = html;\n    return;\n  }\n\n  if (Array.isArray(html)) {\n    el.innerHTML = '';\n    for (let i = 0; i < html.length; i++) {\n      el.appendChild(html[i]);\n    }\n    return;\n  }\n\n  el.innerHTML = '';\n  el.appendChild(html);\n}\n\n/**\n * Sets the value of an input element.\n *\n * @param el The form element.\n * @param value The value to set.\n */\nexport function setValue(el: HTMLInputElement | HTMLSelectElement | null, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.value = value;\n}\n\n/**\n * Sets the checked state of an input element.\n *\n * @param el The form element.\n * @param checked The value to set.\n */\nexport function setChecked(el: HTMLInputElement | null, checked: boolean) {\n  if (!el) {\n    return;\n  }\n\n  el.checked = checked;\n}\n\n/**\n * Sets the value of an attribute on an element.\n *\n * @param el The element.\n * @param name The attribute name.\n * @param value The value to set.\n */\nexport function setAttribute(el: HTMLElement | null, name: string, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.setAttribute(name, value);\n}\n\n/**\n * Build <p> nodes from text with line breaks.\n * - Blank lines separate paragraphs (default).\n * - Single newlines inside a paragraph become <br>.\n *\n * @param text The text to parse.\n * @param opts The options.\n *   - mode: blankLineIsParagraph | everyLineIsParagraph (default: blankLineIsParagraph)\n *   - keepEmpty: keep empty paragraphs if present (default: false)\n *   - className: optional class for each <p> (default: undefined)\n *   - doc: custom Document (e.g., for iframes) (default: document)\n */\nexport function paragraphsFromText(\n  text: string,\n  opts: {\n    mode?: 'blankLineIsParagraph' | 'everyLineIsParagraph';\n    keepEmpty?: boolean;\n    className?: string;\n    doc?: Document;\n  } = {},\n): DocumentFragment {\n  const { mode = 'blankLineIsParagraph', keepEmpty = false, className, doc = document } = opts;\n\n  const frag = doc.createDocumentFragment();\n  if (text == null) return frag;\n\n  // Normalize line endings.\n  const normalized = String(text).replace(/\\r\\n?/g, '\\n');\n\n  // Determine paragraph chunks.\n  const chunks =\n    mode === 'everyLineIsParagraph' ? normalized.split('\\n') : normalized.split(/\\n{2,}/); // one or more blank lines = new paragraph\n\n  for (const raw of chunks) {\n    const paraText = mode === 'everyLineIsParagraph' ? raw : raw.replace(/\\n+$/g, ''); // trim trailing \\n inside a paragraph only\n    if (!keepEmpty && /^\\s*$/.test(paraText)) continue;\n\n    const p = doc.createElement('p');\n    if (className) p.className = className;\n\n    if (mode === 'everyLineIsParagraph') {\n      // Whole line is a paragraph.\n      p.appendChild(doc.createTextNode(paraText));\n    } else {\n      // Inside a paragraph, single newlines become <br>.\n      const lines = paraText.split('\\n');\n      lines.forEach((line, i) => {\n        if (i > 0) p.appendChild(doc.createElement('br'));\n        p.appendChild(doc.createTextNode(line));\n      });\n    }\n\n    frag.appendChild(p);\n  }\n\n  return frag;\n}\n", "import { Config } from './@types/Config';\nimport { formValuesAll, setValue } from './utils';\n\n(async () => {\n  const { ApiClient, Dashboard } = window;\n\n  /**\n   * Controls the configuration page.\n   */\n  class ConfigController {\n    /**\n     * The plugin unique id.\n     */\n    public static pluginUniqueId = '69d36d38-5615-4128-b2e0-30caf4c5ba86';\n\n    /**\n     * The config form.\n     */\n    private configForm!: HTMLFormElement;\n\n    /**\n     * Initializes a new instance of the HomeMessageConfig class.\n     */\n    constructor() {\n      const resetBtn = document.getElementById('home-message-reset-btn') as HTMLButtonElement;\n      resetBtn.addEventListener('click', this.resetConfig);\n\n      this.configForm = document.getElementById('home-message-config-form') as HTMLFormElement;\n      this.configForm.addEventListener('submit', this.saveConfig);\n      this.loadConfig();\n    }\n\n    /**\n     * Resets the configuration to the default values.\n     */\n    public resetConfig = () => {\n      const styles = `\n/* Wraps each message. */\n.home-message-body {\n\n}\n\n/* The message title. */\n.home-message-title {\n\n}\n\n/* The message time. */\n.home-message-time {\n\n}\n\n/* The message text. */\n.home-message-text p {\n\n}\n      `.trim();\n\n      Dashboard.confirm(\n        'Are you sure you want to reset the configuration?',\n        'Reset Configuration',\n        () => {\n          setValue(this.configForm.querySelector('textarea[name=\"styles\"]'), styles);\n          setValue(this.configForm.querySelector('select[name=\"expiration\"]'), '0');\n        },\n      );\n    };\n\n    /**\n     * Saves the configuration to the server.\n     *\n     * @param e The event.\n     */\n    public saveConfig = (e: Event) => {\n      e.preventDefault();\n\n      Dashboard.showLoadingMsg();\n      ApiClient.getPluginConfiguration(ConfigController.pluginUniqueId).then((config: Config) => {\n        const values = formValuesAll(this.configForm);\n        config.Styles = (values.styles || '').toString();\n        config.Expiration = (values.expiration || 0).toString();\n\n        ApiClient.updatePluginConfiguration(ConfigController.pluginUniqueId, config).then(\n          (result: any) => {\n            Dashboard.processPluginConfigurationUpdateResult(result);\n          },\n        );\n      });\n    };\n\n    /**\n     * Loads the configuration from the server.\n     */\n    public loadConfig = () => {\n      ApiClient.getPluginConfiguration(ConfigController.pluginUniqueId).then((config: Config) => {\n        setValue(this.configForm.querySelector('textarea[name=\"styles\"]'), config.Styles);\n        setValue(this.configForm.querySelector('select[name=\"expiration\"]'), config.Expiration);\n      });\n    };\n  }\n\n  const c = new ConfigController();\n  c.loadConfig();\n})();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCO,WAAS,cAAc,MAAmC;AAC/D,UAAM,KAAK,IAAI,SAAS,IAAI;AAC5B,UAAM,MAAkB,CAAC;AAEzB,eAAW,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAqB,GAAG;AACzD,YAAM,MAAM,GAAG,OAAO,IAAI;AAC1B,UAAI,IAAI,IAAI,IAAI,SAAS,IAAI,MAAM,IAAI,CAAC;AAAA,IAC1C;AAEA,WAAO;AAAA,EACT;AAoCO,WAAS,SAAS,IAAiD,OAAe;AACvF,QAAI,CAAC,IAAI;AACP;AAAA,IACF;AAEA,OAAG,QAAQ;AAAA,EACb;AA3FA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AACA;AAEA,OAAC,MAAY;AACX,cAAM,EAAE,WAAW,UAAU,IAAI;AAKjC,cAAM,oBAAN,MAAM,kBAAiB;AAAA;AAAA;AAAA;AAAA,UAcrB,cAAc;AAYd;AAAA;AAAA;AAAA,iBAAO,cAAc,MAAM;AACzB,oBAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAoBb,KAAK;AAEP,wBAAU;AAAA,gBACR;AAAA,gBACA;AAAA,gBACA,MAAM;AACJ,2BAAS,KAAK,WAAW,cAAc,yBAAyB,GAAG,MAAM;AACzE,2BAAS,KAAK,WAAW,cAAc,2BAA2B,GAAG,GAAG;AAAA,gBAC1E;AAAA,cACF;AAAA,YACF;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAO,aAAa,CAAC,MAAa;AAChC,gBAAE,eAAe;AAEjB,wBAAU,eAAe;AACzB,wBAAU,uBAAuB,kBAAiB,cAAc,EAAE,KAAK,CAAC,WAAmB;AACzF,sBAAM,SAAS,cAAc,KAAK,UAAU;AAC5C,uBAAO,UAAU,OAAO,UAAU,IAAI,SAAS;AAC/C,uBAAO,cAAc,OAAO,cAAc,GAAG,SAAS;AAEtD,0BAAU,0BAA0B,kBAAiB,gBAAgB,MAAM,EAAE;AAAA,kBAC3E,CAAC,WAAgB;AACf,8BAAU,uCAAuC,MAAM;AAAA,kBACzD;AAAA,gBACF;AAAA,cACF,CAAC;AAAA,YACH;AAKA;AAAA;AAAA;AAAA,iBAAO,aAAa,MAAM;AACxB,wBAAU,uBAAuB,kBAAiB,cAAc,EAAE,KAAK,CAAC,WAAmB;AACzF,yBAAS,KAAK,WAAW,cAAc,yBAAyB,GAAG,OAAO,MAAM;AAChF,yBAAS,KAAK,WAAW,cAAc,2BAA2B,GAAG,OAAO,UAAU;AAAA,cACxF,CAAC;AAAA,YACH;AA1EE,kBAAM,WAAW,SAAS,eAAe,wBAAwB;AACjE,qBAAS,iBAAiB,SAAS,KAAK,WAAW;AAEnD,iBAAK,aAAa,SAAS,eAAe,0BAA0B;AACpE,iBAAK,WAAW,iBAAiB,UAAU,KAAK,UAAU;AAC1D,iBAAK,WAAW;AAAA,UAClB;AAAA,QAqEF;AAtFE;AAAA;AAAA;AAAA,QAJI,kBAIU,iBAAiB;AAJjC,YAAM,mBAAN;AA4FA,cAAM,IAAI,IAAI,iBAAiB;AAC/B,UAAE,WAAW;AAAA,MACf,IAAG;AAAA;AAAA;",
  "names": []
}
