{
  "version": 3,
  "sources": ["../utils.ts", "../home.ts"],
  "sourcesContent": ["/**\n * Creates a new element.\n *\n * @param tagName The tag name of the element to create.\n * @param attributes The attributes to set on the element.\n */\nexport const createElement = (\n  tagName: string,\n  attributes: Record<string, string | HTMLElement[] | DocumentFragment> = {},\n): HTMLElement => {\n  const el = document.createElement(tagName);\n\n  const attr = Object.assign({}, attributes);\n  if (attr.html) {\n    setHTML(el, attr.html);\n    delete attr.html;\n  }\n\n  const keys = Object.keys(attr);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = attr[key];\n    if (typeof value === 'string') {\n      el.setAttribute(key, value);\n    }\n  }\n\n  return el;\n};\n\ntype Primitive = string | File;\ntype FormValue = Primitive | Primitive[];\ntype FormObject = Record<string, FormValue>;\n\n/**\n * Serializes a form into a FormData object.\n *\n * @param form The form to serialize.\n */\nexport function formValuesAll(form: HTMLFormElement): FormObject {\n  const fd = new FormData(form);\n  const obj: FormObject = {};\n  // De-duplicate keys, then decide single vs array\n  for (const name of new Set(fd.keys() as Iterable<string>)) {\n    const all = fd.getAll(name); // (string | File)[]\n    obj[name] = all.length > 1 ? all : all[0]!;\n  }\n\n  return obj;\n}\n\n/**\n * Sets the inner HTML of an element.\n *\n * @param el The element.\n * @param html The HTML to set.\n */\nexport function setHTML(el: HTMLElement | null, html: string | HTMLElement[] | DocumentFragment) {\n  if (!el) {\n    return;\n  }\n\n  if (typeof html === 'string') {\n    el.innerHTML = html;\n    return;\n  }\n\n  if (Array.isArray(html)) {\n    el.innerHTML = '';\n    for (let i = 0; i < html.length; i++) {\n      el.appendChild(html[i]);\n    }\n    return;\n  }\n\n  el.innerHTML = '';\n  el.appendChild(html);\n}\n\n/**\n * Sets the value of an input element.\n *\n * @param el The form element.\n * @param value The value to set.\n */\nexport function setValue(el: HTMLInputElement | HTMLSelectElement | null, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.value = value;\n}\n\n/**\n * Sets the checked state of an input element.\n *\n * @param el The form element.\n * @param checked The value to set.\n */\nexport function setChecked(el: HTMLInputElement | null, checked: boolean) {\n  if (!el) {\n    return;\n  }\n\n  el.checked = checked;\n}\n\n/**\n * Sets the value of an attribute on an element.\n *\n * @param el The element.\n * @param name The attribute name.\n * @param value The value to set.\n */\nexport function setAttribute(el: HTMLElement | null, name: string, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.setAttribute(name, value);\n}\n\n/**\n * Build <p> nodes from text with line breaks.\n * - Blank lines separate paragraphs (default).\n * - Single newlines inside a paragraph become <br>.\n *\n * @param text The text to parse.\n * @param opts The options.\n *   - mode: blankLineIsParagraph | everyLineIsParagraph (default: blankLineIsParagraph)\n *   - keepEmpty: keep empty paragraphs if present (default: false)\n *   - className: optional class for each <p> (default: undefined)\n *   - doc: custom Document (e.g., for iframes) (default: document)\n *   - allowHtml: preserve HTML instead of inserting as text (default: true)\n */\nexport function paragraphsFromText(\n  text: string,\n  opts: {\n    mode?: 'blankLineIsParagraph' | 'everyLineIsParagraph';\n    keepEmpty?: boolean;\n    className?: string;\n    doc?: Document;\n    allowHtml?: boolean;\n  } = {},\n): DocumentFragment {\n  const {\n    mode = 'blankLineIsParagraph',\n    keepEmpty = false,\n    className,\n    doc = document,\n    allowHtml = true,\n  } = opts;\n\n  const frag = doc.createDocumentFragment();\n  if (text == null) return frag;\n\n  // Normalize line endings.\n  const normalized = String(text).replace(/\\r\\n?/g, '\\n');\n\n  // Determine paragraph chunks.\n  const chunks =\n    mode === 'everyLineIsParagraph' ? normalized.split('\\n') : normalized.split(/\\n{2,}/); // one or more blank lines = new paragraph\n\n  // Helper: append HTML (or text) to a node.\n  const appendContent = (parent: Element, content: string) => {\n    if (!allowHtml) {\n      parent.appendChild(doc.createTextNode(content));\n      return;\n    }\n    // Parse as HTML safely via <template> (scripts won't execute during parse).\n    const tpl = doc.createElement('template');\n    tpl.innerHTML = content;\n    parent.appendChild(tpl.content);\n  };\n\n  for (const raw of chunks) {\n    const paraText = mode === 'everyLineIsParagraph' ? raw : raw.replace(/\\n+$/g, ''); // trim trailing \\n inside a paragraph only\n    if (!keepEmpty && /^\\s*$/.test(paraText)) continue;\n\n    const p = doc.createElement('p');\n    if (className) p.className = className;\n\n    if (mode === 'everyLineIsParagraph') {\n      // Whole line is a paragraph.\n      appendContent(p, paraText);\n    } else {\n      // Inside a paragraph, single newlines become <br>.\n      const lines = paraText.split('\\n');\n      lines.forEach((line, i) => {\n        if (i > 0) p.appendChild(doc.createElement('br'));\n        appendContent(p, line);\n      });\n    }\n\n    frag.appendChild(p);\n  }\n\n  return frag;\n}\n", "import { Message } from './@types/Message';\nimport { createElement, paragraphsFromText } from './utils';\n\n(async () => {\n  const { ApiClient } = window;\n  const cssClassPrefix = 'home-message';\n  const pluginUniqueId = '69d36d38-5615-4128-b2e0-30caf4c5ba86';\n\n  /**\n   * Displays a message on the home page.\n   *\n   * @param messageElements The #indexPage element.\n   * @param message The message to display.\n   */\n  const displayMessage = (messageElements: HTMLElement, message: Message) => {\n    const createdDate = new Date(message.CreatedTime * 1000);\n    const messageItem = createElement('li', {\n      role: 'note',\n      class: `${cssClassPrefix}-item`,\n      'aria-labelledby': `${cssClassPrefix}-message-${message.Id}`,\n      'aria-describedby': `${cssClassPrefix}-description-${message.Id}`,\n      html: `\n        <div\n            class=\"${cssClassPrefix}-body\"\n            style=\"background-color: ${message.BgColor}; color: ${message.TextColor};\"\n        >\n          ${message.Dismissible ? `<button title=\"Close\" type=\"button\" aria-label=\"Dismiss announcement\" class=\"${cssClassPrefix}-dismiss\"><span aria-hidden=\"true\">&times;</span></button>` : ''}\n          <div id=\"${cssClassPrefix}-message-${message.Id}\" class=\"${cssClassPrefix}-title\">\n            ${message.Title}\n          </div>\n          <time class=\"${cssClassPrefix}-time\">\n            ${createdDate.toLocaleDateString()} ${createdDate.toLocaleTimeString()}\n          </time>\n          <div id=\"${cssClassPrefix}-description-${message.Id}\" class=\"${cssClassPrefix}-text\"></div>\n        </div>\n        `,\n    });\n\n    const text = messageItem.querySelector(`.${cssClassPrefix}-text`) as HTMLDivElement;\n    if (text) {\n      text.appendChild(paragraphsFromText(message.Text));\n    }\n\n    if (message.Dismissible) {\n      const btn = messageItem.querySelector(`.${cssClassPrefix}-dismiss`) as HTMLButtonElement;\n      btn.addEventListener('click', async () => {\n        messageElements.removeChild(messageItem);\n        const url = ApiClient.getUrl(`HomeMessage/messages/${message.Id}`);\n        await ApiClient.ajax({\n          type: 'DELETE',\n          url,\n        });\n      });\n    }\n\n    messageElements.appendChild(messageItem);\n  };\n\n  /**\n   * Called when the page is ready.\n   *\n   * @param indexPage The #indexPage element.\n   */\n  const ready = async (indexPage: HTMLElement) => {\n    ApiClient.getPluginConfiguration(pluginUniqueId)\n      .then(async (config: any) => {\n        // Adds configured styles to the document.\n        const styles = config.Styles || '';\n        if (styles) {\n          const style = document.createElement('style');\n          style.innerHTML = styles;\n          document.head.appendChild(style);\n        }\n\n        // Creates a container for the messages.\n        const container = createElement('div', {\n          class: `emby-scroller`,\n        });\n        indexPage.prepend(container);\n\n        const section = createElement('section', {\n          class: `${cssClassPrefix}-section`,\n          role: 'region',\n          'aria-label': 'Announcements',\n          'aria-live': 'polite',\n        });\n        container.prepend(section);\n\n        const messageElements = createElement('ul', {\n          class: `${cssClassPrefix}-messages`,\n          role: 'list',\n        });\n        section.prepend(messageElements);\n\n        // Loads the messages from the server.\n        const url = ApiClient.getUrl('HomeMessage/messages');\n        const messages = await ApiClient.getJSON<Message[]>(url);\n        for (let i = 0; i < messages.length; i++) {\n          const message = messages[i];\n          displayMessage(messageElements, message);\n        }\n      })\n      .catch((error: any) => {\n        console.error(error);\n      });\n  };\n\n  /**\n   * Waits for the #indexPage element to be available, then calls ready().\n   */\n  const boot = async () => {\n    const indexPage = document.getElementById('indexPage');\n    if (!indexPage) {\n      setTimeout(async () => await boot(), 100);\n      return;\n    }\n\n    await ready(indexPage);\n  };\n  await boot();\n})();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDO,WAAS,QAAQ,IAAwB,MAAiD;AAC/F,QAAI,CAAC,IAAI;AACP;AAAA,IACF;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,SAAG,YAAY;AACf;AAAA,IACF;AAEA,QAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,SAAG,YAAY;AACf,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,WAAG,YAAY,KAAK,CAAC,CAAC;AAAA,MACxB;AACA;AAAA,IACF;AAEA,OAAG,YAAY;AACf,OAAG,YAAY,IAAI;AAAA,EACrB;AA0DO,WAAS,mBACd,MACA,OAMI,CAAC,GACa;AAClB,UAAM;AAAA,MACJ,OAAO;AAAA,MACP,YAAY;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,MACN,YAAY;AAAA,IACd,IAAI;AAEJ,UAAM,OAAO,IAAI,uBAAuB;AACxC,QAAI,QAAQ,KAAM,QAAO;AAGzB,UAAM,aAAa,OAAO,IAAI,EAAE,QAAQ,UAAU,IAAI;AAGtD,UAAM,SACJ,SAAS,yBAAyB,WAAW,MAAM,IAAI,IAAI,WAAW,MAAM,QAAQ;AAGtF,UAAM,gBAAgB,CAAC,QAAiB,YAAoB;AAC1D,UAAI,CAAC,WAAW;AACd,eAAO,YAAY,IAAI,eAAe,OAAO,CAAC;AAC9C;AAAA,MACF;AAEA,YAAM,MAAM,IAAI,cAAc,UAAU;AACxC,UAAI,YAAY;AAChB,aAAO,YAAY,IAAI,OAAO;AAAA,IAChC;AAEA,eAAW,OAAO,QAAQ;AACxB,YAAM,WAAW,SAAS,yBAAyB,MAAM,IAAI,QAAQ,SAAS,EAAE;AAChF,UAAI,CAAC,aAAa,QAAQ,KAAK,QAAQ,EAAG;AAE1C,YAAM,IAAI,IAAI,cAAc,GAAG;AAC/B,UAAI,UAAW,GAAE,YAAY;AAE7B,UAAI,SAAS,wBAAwB;AAEnC,sBAAc,GAAG,QAAQ;AAAA,MAC3B,OAAO;AAEL,cAAM,QAAQ,SAAS,MAAM,IAAI;AACjC,cAAM,QAAQ,CAAC,MAAM,MAAM;AACzB,cAAI,IAAI,EAAG,GAAE,YAAY,IAAI,cAAc,IAAI,CAAC;AAChD,wBAAc,GAAG,IAAI;AAAA,QACvB,CAAC;AAAA,MACH;AAEA,WAAK,YAAY,CAAC;AAAA,IACpB;AAEA,WAAO;AAAA,EACT;AAtMA,MAMa;AANb;AAAA;AAMO,MAAM,gBAAgB,CAC3B,SACA,aAAwE,CAAC,MACzD;AAChB,cAAM,KAAK,SAAS,cAAc,OAAO;AAEzC,cAAM,OAAO,OAAO,OAAO,CAAC,GAAG,UAAU;AACzC,YAAI,KAAK,MAAM;AACb,kBAAQ,IAAI,KAAK,IAAI;AACrB,iBAAO,KAAK;AAAA,QACd;AAEA,cAAM,OAAO,OAAO,KAAK,IAAI;AAC7B,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,gBAAM,MAAM,KAAK,CAAC;AAClB,gBAAM,QAAQ,KAAK,GAAG;AACtB,cAAI,OAAO,UAAU,UAAU;AAC7B,eAAG,aAAa,KAAK,KAAK;AAAA,UAC5B;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA;AAAA;;;AC5BA;AAAA;AACA;AAEA,OAAC,MAAY;AACX,cAAM,EAAE,UAAU,IAAI;AACtB,cAAM,iBAAiB;AACvB,cAAM,iBAAiB;AAQvB,cAAM,iBAAiB,CAAC,iBAA8B,YAAqB;AACzE,gBAAM,cAAc,IAAI,KAAK,QAAQ,cAAc,GAAI;AACvD,gBAAM,cAAc,cAAc,MAAM;AAAA,YACtC,MAAM;AAAA,YACN,OAAO,GAAG,cAAc;AAAA,YACxB,mBAAmB,GAAG,cAAc,YAAY,QAAQ,EAAE;AAAA,YAC1D,oBAAoB,GAAG,cAAc,gBAAgB,QAAQ,EAAE;AAAA,YAC/D,MAAM;AAAA;AAAA,qBAES,cAAc;AAAA,uCACI,QAAQ,OAAO,YAAY,QAAQ,SAAS;AAAA;AAAA,YAEvE,QAAQ,cAAc,gFAAgF,cAAc,+DAA+D,EAAE;AAAA,qBAC5K,cAAc,YAAY,QAAQ,EAAE,YAAY,cAAc;AAAA,cACrE,QAAQ,KAAK;AAAA;AAAA,yBAEF,cAAc;AAAA,cACzB,YAAY,mBAAmB,CAAC,IAAI,YAAY,mBAAmB,CAAC;AAAA;AAAA,qBAE7D,cAAc,gBAAgB,QAAQ,EAAE,YAAY,cAAc;AAAA;AAAA;AAAA,UAGnF,CAAC;AAED,gBAAM,OAAO,YAAY,cAAc,IAAI,cAAc,OAAO;AAChE,cAAI,MAAM;AACR,iBAAK,YAAY,mBAAmB,QAAQ,IAAI,CAAC;AAAA,UACnD;AAEA,cAAI,QAAQ,aAAa;AACvB,kBAAM,MAAM,YAAY,cAAc,IAAI,cAAc,UAAU;AAClE,gBAAI,iBAAiB,SAAS,MAAY;AACxC,8BAAgB,YAAY,WAAW;AACvC,oBAAM,MAAM,UAAU,OAAO,wBAAwB,QAAQ,EAAE,EAAE;AACjE,oBAAM,UAAU,KAAK;AAAA,gBACnB,MAAM;AAAA,gBACN;AAAA,cACF,CAAC;AAAA,YACH,EAAC;AAAA,UACH;AAEA,0BAAgB,YAAY,WAAW;AAAA,QACzC;AAOA,cAAM,QAAQ,CAAO,cAA2B;AAC9C,oBAAU,uBAAuB,cAAc,EAC5C,KAAK,CAAO,WAAgB;AAE3B,kBAAM,SAAS,OAAO,UAAU;AAChC,gBAAI,QAAQ;AACV,oBAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,oBAAM,YAAY;AAClB,uBAAS,KAAK,YAAY,KAAK;AAAA,YACjC;AAGA,kBAAM,YAAY,cAAc,OAAO;AAAA,cACrC,OAAO;AAAA,YACT,CAAC;AACD,sBAAU,QAAQ,SAAS;AAE3B,kBAAM,UAAU,cAAc,WAAW;AAAA,cACvC,OAAO,GAAG,cAAc;AAAA,cACxB,MAAM;AAAA,cACN,cAAc;AAAA,cACd,aAAa;AAAA,YACf,CAAC;AACD,sBAAU,QAAQ,OAAO;AAEzB,kBAAM,kBAAkB,cAAc,MAAM;AAAA,cAC1C,OAAO,GAAG,cAAc;AAAA,cACxB,MAAM;AAAA,YACR,CAAC;AACD,oBAAQ,QAAQ,eAAe;AAG/B,kBAAM,MAAM,UAAU,OAAO,sBAAsB;AACnD,kBAAM,WAAW,MAAM,UAAU,QAAmB,GAAG;AACvD,qBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,oBAAM,UAAU,SAAS,CAAC;AAC1B,6BAAe,iBAAiB,OAAO;AAAA,YACzC;AAAA,UACF,EAAC,EACA,MAAM,CAAC,UAAe;AACrB,oBAAQ,MAAM,KAAK;AAAA,UACrB,CAAC;AAAA,QACL;AAKA,cAAM,OAAO,MAAY;AACvB,gBAAM,YAAY,SAAS,eAAe,WAAW;AACrD,cAAI,CAAC,WAAW;AACd,uBAAW,MAAS;AAAG,2BAAM,KAAK;AAAA,gBAAG,GAAG;AACxC;AAAA,UACF;AAEA,gBAAM,MAAM,SAAS;AAAA,QACvB;AACA,cAAM,KAAK;AAAA,MACb,IAAG;AAAA;AAAA;",
  "names": []
}
