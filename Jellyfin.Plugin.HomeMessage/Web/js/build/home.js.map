{
  "version": 3,
  "sources": ["../utils.ts", "../home.ts"],
  "sourcesContent": ["/**\n * Creates a new element.\n *\n * @param tagName The tag name of the element to create.\n * @param attributes The attributes to set on the element.\n */\nexport const createElement = (\n  tagName: string,\n  attributes: Record<string, string> = {},\n): HTMLElement => {\n  const el = document.createElement(tagName);\n\n  const attr = Object.assign({}, attributes);\n  if (attr.html) {\n    el.innerHTML = attr.html;\n    delete attr.html;\n  }\n\n  const keys = Object.keys(attr);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = attr[key];\n    el.setAttribute(key, value);\n  }\n\n  return el;\n};\n\ntype Primitive = string | File;\ntype FormValue = Primitive | Primitive[];\ntype FormObject = Record<string, FormValue>;\n\n/**\n * Serializes a form into a FormData object.\n *\n * @param form The form to serialize.\n */\nexport function formValuesAll(form: HTMLFormElement): FormObject {\n  const fd = new FormData(form);\n  const obj: FormObject = {};\n  // De-duplicate keys, then decide single vs array\n  for (const name of new Set(fd.keys() as Iterable<string>)) {\n    const all = fd.getAll(name); // (string | File)[]\n    obj[name] = all.length > 1 ? all : all[0]!;\n  }\n\n  return obj;\n}\n", "import { Message } from './@types/Message';\nimport { createElement } from './utils';\n\n(async () => {\n  const { ApiClient } = window;\n  const cssClassPrefix = 'home-message';\n\n  /**\n   * Displays a message on the home page.\n   *\n   * @param messageElements The #indexPage element.\n   * @param message The message to display.\n   */\n  const displayMessage = (messageElements: HTMLElement, message: Message) => {\n    const messageElement = createElement('div', {\n      class: `${cssClassPrefix}-message`,\n      style: `background-color: ${message.BgColor}; color: ${message.TextColor};`,\n    });\n\n    if (message.Dismissible) {\n      const btn = createElement('button', {\n        title: 'Close',\n        class: `${cssClassPrefix}-dismiss`,\n        html: '&times;',\n      });\n      btn.addEventListener('click', async () => {\n        messageElements.removeChild(messageElement);\n        const url = ApiClient.getUrl(`HomeMessage/messages/${message.Id}`);\n        await ApiClient.ajax({\n          type: 'DELETE',\n          url,\n        });\n      });\n      messageElement.appendChild(btn);\n    }\n\n    const titleElement = createElement('h3', {\n      class: `${cssClassPrefix}-title`,\n      html: message.Title,\n    });\n    messageElement.appendChild(titleElement);\n\n    const textElement = createElement('p', {\n      class: `${cssClassPrefix}-text`,\n      html: message.Text,\n    });\n    messageElement.appendChild(textElement);\n\n    messageElements.appendChild(messageElement);\n  };\n\n  /**\n   * Called when the page is ready.\n   *\n   * @param indexPage The #indexPage element.\n   */\n  const ready = async (indexPage: HTMLElement) => {\n    const messageElements = createElement('div', {\n      class: `${cssClassPrefix}-messages emby-scroller`,\n    });\n    indexPage.prepend(messageElements);\n\n    const url = ApiClient.getUrl('HomeMessage/messages');\n    const messages = await ApiClient.getJSON<Message[]>(url);\n    for (let i = 0; i < messages.length; i++) {\n      const message = messages[i];\n      displayMessage(messageElements, message);\n    }\n  };\n\n  /**\n   * Waits for the #indexPage element to be available, then calls ready().\n   */\n  const boot = async () => {\n    const indexPage = document.getElementById('indexPage');\n    if (!indexPage) {\n      setTimeout(async () => await boot(), 100);\n      return;\n    }\n\n    await ready(indexPage);\n  };\n  await boot();\n})();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAMa;AANb;AAAA;AAMO,MAAM,gBAAgB,CAC3B,SACA,aAAqC,CAAC,MACtB;AAChB,cAAM,KAAK,SAAS,cAAc,OAAO;AAEzC,cAAM,OAAO,OAAO,OAAO,CAAC,GAAG,UAAU;AACzC,YAAI,KAAK,MAAM;AACb,aAAG,YAAY,KAAK;AACpB,iBAAO,KAAK;AAAA,QACd;AAEA,cAAM,OAAO,OAAO,KAAK,IAAI;AAC7B,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,gBAAM,MAAM,KAAK,CAAC;AAClB,gBAAM,QAAQ,KAAK,GAAG;AACtB,aAAG,aAAa,KAAK,KAAK;AAAA,QAC5B;AAEA,eAAO;AAAA,MACT;AAAA;AAAA;;;AC1BA;AAAA;AACA;AAEA,OAAC,MAAY;AACX,cAAM,EAAE,UAAU,IAAI;AACtB,cAAM,iBAAiB;AAQvB,cAAM,iBAAiB,CAAC,iBAA8B,YAAqB;AACzE,gBAAM,iBAAiB,cAAc,OAAO;AAAA,YAC1C,OAAO,GAAG,cAAc;AAAA,YACxB,OAAO,qBAAqB,QAAQ,OAAO,YAAY,QAAQ,SAAS;AAAA,UAC1E,CAAC;AAED,cAAI,QAAQ,aAAa;AACvB,kBAAM,MAAM,cAAc,UAAU;AAAA,cAClC,OAAO;AAAA,cACP,OAAO,GAAG,cAAc;AAAA,cACxB,MAAM;AAAA,YACR,CAAC;AACD,gBAAI,iBAAiB,SAAS,MAAY;AACxC,8BAAgB,YAAY,cAAc;AAC1C,oBAAM,MAAM,UAAU,OAAO,wBAAwB,QAAQ,EAAE,EAAE;AACjE,oBAAM,UAAU,KAAK;AAAA,gBACnB,MAAM;AAAA,gBACN;AAAA,cACF,CAAC;AAAA,YACH,EAAC;AACD,2BAAe,YAAY,GAAG;AAAA,UAChC;AAEA,gBAAM,eAAe,cAAc,MAAM;AAAA,YACvC,OAAO,GAAG,cAAc;AAAA,YACxB,MAAM,QAAQ;AAAA,UAChB,CAAC;AACD,yBAAe,YAAY,YAAY;AAEvC,gBAAM,cAAc,cAAc,KAAK;AAAA,YACrC,OAAO,GAAG,cAAc;AAAA,YACxB,MAAM,QAAQ;AAAA,UAChB,CAAC;AACD,yBAAe,YAAY,WAAW;AAEtC,0BAAgB,YAAY,cAAc;AAAA,QAC5C;AAOA,cAAM,QAAQ,CAAO,cAA2B;AAC9C,gBAAM,kBAAkB,cAAc,OAAO;AAAA,YAC3C,OAAO,GAAG,cAAc;AAAA,UAC1B,CAAC;AACD,oBAAU,QAAQ,eAAe;AAEjC,gBAAM,MAAM,UAAU,OAAO,sBAAsB;AACnD,gBAAM,WAAW,MAAM,UAAU,QAAmB,GAAG;AACvD,mBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,kBAAM,UAAU,SAAS,CAAC;AAC1B,2BAAe,iBAAiB,OAAO;AAAA,UACzC;AAAA,QACF;AAKA,cAAM,OAAO,MAAY;AACvB,gBAAM,YAAY,SAAS,eAAe,WAAW;AACrD,cAAI,CAAC,WAAW;AACd,uBAAW,MAAS;AAAG,2BAAM,KAAK;AAAA,gBAAG,GAAG;AACxC;AAAA,UACF;AAEA,gBAAM,MAAM,SAAS;AAAA,QACvB;AACA,cAAM,KAAK;AAAA,MACb,IAAG;AAAA;AAAA;",
  "names": []
}
