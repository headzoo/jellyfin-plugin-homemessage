{
  "version": 3,
  "sources": ["../utils.ts", "../MessagesController.ts", "../messages.ts"],
  "sourcesContent": ["/**\n * Creates a new element.\n *\n * @param tagName The tag name of the element to create.\n * @param attributes The attributes to set on the element.\n */\nexport const createElement = (\n  tagName: string,\n  attributes: Record<string, string | HTMLElement[] | DocumentFragment> = {},\n): HTMLElement => {\n  const el = document.createElement(tagName);\n\n  const attr = Object.assign({}, attributes);\n  if (attr.html) {\n    setHTML(el, attr.html);\n    delete attr.html;\n  }\n\n  const keys = Object.keys(attr);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = attr[key];\n    if (typeof value === 'string') {\n      el.setAttribute(key, value);\n    }\n  }\n\n  return el;\n};\n\ntype Primitive = string | File;\ntype FormValue = Primitive | Primitive[];\ntype FormObject = Record<string, FormValue>;\n\n/**\n * Serializes a form into a FormData object.\n *\n * @param form The form to serialize.\n */\nexport function formValuesAll(form: HTMLFormElement): FormObject {\n  const fd = new FormData(form);\n  const obj: FormObject = {};\n  // De-duplicate keys, then decide single vs array\n  for (const name of new Set(fd.keys() as Iterable<string>)) {\n    const all = fd.getAll(name); // (string | File)[]\n    obj[name] = all.length > 1 ? all : all[0]!;\n  }\n\n  return obj;\n}\n\n/**\n * Sets the inner HTML of an element.\n *\n * @param el The element.\n * @param html The HTML to set.\n */\nexport function setHTML(el: HTMLElement | null, html: string | HTMLElement[] | DocumentFragment) {\n  if (!el) {\n    return;\n  }\n\n  if (typeof html === 'string') {\n    el.innerHTML = html;\n    return;\n  }\n\n  if (Array.isArray(html)) {\n    el.innerHTML = '';\n    for (let i = 0; i < html.length; i++) {\n      el.appendChild(html[i]);\n    }\n    return;\n  }\n\n  el.innerHTML = '';\n  el.appendChild(html);\n}\n\n/**\n * Sets the value of an input element.\n *\n * @param el The form element.\n * @param value The value to set.\n */\nexport function setValue(el: HTMLInputElement | HTMLSelectElement | null, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.value = value;\n}\n\n/**\n * Sets the checked state of an input element.\n *\n * @param el The form element.\n * @param checked The value to set.\n */\nexport function setChecked(el: HTMLInputElement | null, checked: boolean) {\n  if (!el) {\n    return;\n  }\n\n  el.checked = checked;\n}\n\n/**\n * Sets the value of an attribute on an element.\n *\n * @param el The element.\n * @param name The attribute name.\n * @param value The value to set.\n */\nexport function setAttribute(el: HTMLElement | null, name: string, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.setAttribute(name, value);\n}\n\n/**\n * Build <p> nodes from text with line breaks.\n * - Blank lines separate paragraphs (default).\n * - Single newlines inside a paragraph become <br>.\n *\n * @param text The text to parse.\n * @param opts The options.\n *   - mode: blankLineIsParagraph | everyLineIsParagraph (default: blankLineIsParagraph)\n *   - keepEmpty: keep empty paragraphs if present (default: false)\n *   - className: optional class for each <p> (default: undefined)\n *   - doc: custom Document (e.g., for iframes) (default: document)\n */\nexport function paragraphsFromText(\n  text: string,\n  opts: {\n    mode?: 'blankLineIsParagraph' | 'everyLineIsParagraph';\n    keepEmpty?: boolean;\n    className?: string;\n    doc?: Document;\n  } = {},\n): DocumentFragment {\n  const { mode = 'blankLineIsParagraph', keepEmpty = false, className, doc = document } = opts;\n\n  const frag = doc.createDocumentFragment();\n  if (text == null) return frag;\n\n  // Normalize line endings.\n  const normalized = String(text).replace(/\\r\\n?/g, '\\n');\n\n  // Determine paragraph chunks.\n  const chunks =\n    mode === 'everyLineIsParagraph' ? normalized.split('\\n') : normalized.split(/\\n{2,}/); // one or more blank lines = new paragraph\n\n  for (const raw of chunks) {\n    const paraText = mode === 'everyLineIsParagraph' ? raw : raw.replace(/\\n+$/g, ''); // trim trailing \\n inside a paragraph only\n    if (!keepEmpty && /^\\s*$/.test(paraText)) continue;\n\n    const p = doc.createElement('p');\n    if (className) p.className = className;\n\n    if (mode === 'everyLineIsParagraph') {\n      // Whole line is a paragraph.\n      p.appendChild(doc.createTextNode(paraText));\n    } else {\n      // Inside a paragraph, single newlines become <br>.\n      const lines = paraText.split('\\n');\n      lines.forEach((line, i) => {\n        if (i > 0) p.appendChild(doc.createElement('br'));\n        p.appendChild(doc.createTextNode(line));\n      });\n    }\n\n    frag.appendChild(p);\n  }\n\n  return frag;\n}\n", "import { Message, MessageInput } from './@types/Message';\nimport {\n  formValuesAll,\n  setHTML,\n  setValue,\n  setChecked,\n  setAttribute,\n  paragraphsFromText,\n} from './utils';\n\nconst { ApiClient, Dashboard } = window;\n\n/**\n * Controls the messages page.\n *\n * @see https://github.com/jellyfin-archive/jellyfin-apiclient-javascript\n * @see https://github.com/jellyfin/jellyfin-web/blob/808ece5db48b40bcf841e99c96adf5b8213d77e3/src/utils/dashboard.js#L236\n */\nexport default class MessagesController {\n  /**\n   * The messages.\n   */\n  private messages: Message[] = [];\n\n  /**\n   * The message form.\n   */\n  private form!: HTMLFormElement;\n\n  /**\n   * The recent background colors list.\n   */\n  private recentBackgroundColorsList!: HTMLUListElement;\n\n  /**\n   * The recent text colors list.\n   */\n  private recentTextColorsList!: HTMLUListElement;\n\n  /**\n   * Initializes a new instance of the HomeMessageConfig class.\n   */\n  constructor() {\n    this.recentBackgroundColorsList = document.getElementById(\n      'home-message-recent-colors-list-bg',\n    ) as HTMLUListElement;\n    this.recentTextColorsList = document.getElementById(\n      'home-message-recent-colors-list-text',\n    ) as HTMLUListElement;\n\n    this.form = document.getElementById('home-message-message-form') as HTMLFormElement;\n    this.form.addEventListener('submit', this.saveMessage);\n    this.resetForm();\n  }\n\n  /**\n   * Loads the existing messages from the server.\n   */\n  public loadMessages = () => {\n    this.ajax('GET', 'admin/messages').then((messages: Message[]) => {\n      this.messages = messages;\n      this.renderMessages();\n      this.renderRecentColors();\n    });\n  };\n\n  /**\n   * Creates and updates a message.\n   *\n   * @param e The event.\n   */\n  public saveMessage = (e: Event) => {\n    e.preventDefault();\n\n    const values = formValuesAll(this.form);\n    const message: MessageInput = {\n      Title: (values.title || '').toString(),\n      Text: (values.message || '').toString(),\n      BgColor: (values.bgColor || '').toString(),\n      TextColor: (values.textColor || '').toString(),\n      Dismissible: (values.dismissible && values.dismissible) === 'on',\n      TimeStart: values.timeStart ? new Date(values.timeStart.toString()).getTime() / 1000 : null,\n      TimeEnd: values.timeEnd ? new Date(values.timeEnd.toString()).getTime() / 1000 : null,\n    };\n\n    this.saveRecentBackgroundColor(message.BgColor);\n    this.saveRecentTextColor(message.TextColor);\n\n    const isExisting = !!values.id;\n    const url = isExisting ? `admin/messages/${values.id}` : 'admin/messages';\n    this.ajax('POST', url, message).then(() => {\n      this.resetForm();\n      this.loadMessages();\n      Dashboard.alert(isExisting ? 'Message updated' : 'Message added');\n    });\n  };\n\n  /**\n   * Renders the messages.\n   */\n  private renderMessages = () => {\n    const template = document.getElementById('home-message-item-template') as HTMLTemplateElement;\n    const messages = document.getElementById('home-message-messages') as HTMLUListElement;\n    messages.innerHTML = '';\n\n    for (let i = 0; i < this.messages.length; i++) {\n      const message = this.messages[i];\n      const createdDate = new Date(message.CreatedTime * 1000);\n\n      const li = template.content.cloneNode(true) as HTMLElement;\n      setAttribute(\n        li.querySelector('.home-message-messages-item-body'),\n        'style',\n        `background-color: ${message.BgColor}; color: ${message.TextColor}`,\n      );\n      setAttribute(li.querySelector('[data-message-id]'), 'data-message-id', message.Id);\n      setHTML(li.querySelector('h4'), message.Title);\n      setHTML(\n        li.querySelector('.home-message-messages-item-text'),\n        paragraphsFromText(message.Text),\n      );\n      setHTML(\n        li.querySelector('time'),\n        `${createdDate.toLocaleDateString()} ${createdDate.toLocaleTimeString()}`,\n      );\n      messages.appendChild(li);\n    }\n\n    const editBtns = document.getElementsByClassName(\n      'home-message-messages-item-heading-edit-btn',\n    ) as HTMLCollectionOf<HTMLButtonElement>;\n    for (let i = 0; i < editBtns.length; i++) {\n      const btn = editBtns[i];\n      btn.addEventListener('click', this.editMessage);\n    }\n\n    const closeBtns = document.getElementsByClassName(\n      'home-message-messages-item-heading-close-btn',\n    ) as HTMLCollectionOf<HTMLButtonElement>;\n    for (let i = 0; i < closeBtns.length; i++) {\n      const btn = closeBtns[i];\n      btn.addEventListener('click', this.deleteMessage);\n    }\n  };\n\n  /**\n   * Edits a message.\n   *\n   * @param e The event.\n   */\n  private editMessage = (e: Event) => {\n    e.preventDefault();\n\n    const btn = e.currentTarget as HTMLButtonElement;\n    const parent = btn.closest('[data-message-id]') as HTMLElement;\n    const messageId = parent?.dataset.messageId;\n    if (!messageId) {\n      return;\n    }\n    const message = this.messages.find((m) => m.Id === messageId);\n    if (!message) {\n      return;\n    }\n\n    this.resetForm();\n    const submitBtn = document.querySelector('#home-message-submit-btn span') as HTMLElement;\n    submitBtn.textContent = 'Update';\n\n    setValue(this.form.querySelector('input[name=\"id\"]'), message.Id);\n    setValue(this.form.querySelector('input[name=\"title\"]'), message.Title);\n    setValue(this.form.querySelector('textarea[name=\"message\"]'), message.Text);\n    setValue(this.form.querySelector('input[name=\"bgColor\"]'), message.BgColor);\n    setValue(this.form.querySelector('input[name=\"textColor\"]'), message.TextColor);\n    setChecked(this.form.querySelector('input[name=\"dismissible\"]'), message.Dismissible);\n\n    this.form.scrollIntoView({\n      behavior: 'smooth',\n      block: 'start',\n    });\n  };\n\n  /**\n   * Deletes a message.\n   *\n   * @param e The event.\n   */\n  private deleteMessage = (e: Event) => {\n    e.preventDefault();\n\n    const btn = e.currentTarget as HTMLButtonElement;\n    const parent = btn.closest('[data-message-id]') as HTMLElement;\n    const messageId = parent?.dataset.messageId;\n    if (!messageId) {\n      return;\n    }\n\n    Dashboard.confirm(\n      'Are you sure you want to delete this message?',\n      'Delete Message',\n      (result) => {\n        if (result) {\n          this.ajax('DELETE', `admin/messages/${messageId}`).then(() => {\n            this.loadMessages();\n            Dashboard.alert('Message deleted');\n          });\n        }\n      },\n    );\n  };\n\n  /**\n   * Makes an AJAX request.\n   *\n   * @param method The HTTP method to use.\n   * @param path The URL to make the request to.\n   * @param data The data to send.\n   */\n  private ajax = async (method: 'GET' | 'POST' | 'PUT' | 'DELETE', path: string, data?: any) => {\n    Dashboard.showLoadingMsg();\n    return await ApiClient.ajax({\n      type: method,\n      url: ApiClient.getUrl(`HomeMessage/${path}`),\n      dataType: 'json',\n      contentType: 'application/json; charset=utf-8',\n      data: JSON.stringify(data),\n      headers: {\n        accept: 'application/json',\n      },\n    })\n      .catch((error: any) => {\n        console.error(error);\n        Dashboard.alert(error.toString());\n      })\n      .finally(() => {\n        Dashboard.hideLoadingMsg();\n      });\n  };\n\n  /**\n   * Resets the form.\n   */\n  private resetForm = () => {\n    this.form.reset();\n    setValue(this.form.querySelector('input[name=\"bgColor\"]'), '#333333');\n    setValue(this.form.querySelector('input[name=\"textColor\"]'), '#ffffff');\n    setChecked(this.form.querySelector('input[name=\"dismissible\"]'), true);\n\n    const submitBtn = document.querySelector('#home-message-submit-btn span') as HTMLElement;\n    submitBtn.textContent = 'Add';\n  };\n\n  /**\n   * Renders the recent colors.\n   */\n  private renderRecentColors = () => {\n    const backgroundColors = this.getRecentBackgroundColors();\n    const textColors = this.getRecentTextColors();\n\n    this.recentBackgroundColorsList.innerHTML = '';\n    if (backgroundColors.length === 0) {\n      this.recentBackgroundColorsList.style.display = 'none';\n    } else {\n      this.recentBackgroundColorsList.style.display = 'block';\n      for (let i = 0; i < backgroundColors.length; i++) {\n        const color = backgroundColors[i];\n        const li = document.createElement('li');\n        li.title = 'Select color';\n        li.style.backgroundColor = color;\n        li.classList.add('home-message-recent-colors-item');\n        li.addEventListener('click', () => {\n          setValue(this.form.querySelector('input[name=\"bgColor\"]'), color);\n        });\n        this.recentBackgroundColorsList.appendChild(li);\n      }\n    }\n\n    this.recentTextColorsList.innerHTML = '';\n    if (textColors.length === 0) {\n      this.recentTextColorsList.style.display = 'none';\n    } else {\n      this.recentTextColorsList.style.display = 'block';\n      for (let i = 0; i < textColors.length; i++) {\n        const color = textColors[i];\n        const li = document.createElement('li');\n        li.title = 'Select color';\n        li.style.backgroundColor = color;\n        li.classList.add('home-message-recent-colors-item');\n        li.addEventListener('click', () => {\n          setValue(this.form.querySelector('input[name=\"textColor\"]'), color);\n          this.saveRecentTextColor(color);\n        });\n        this.recentTextColorsList.appendChild(li);\n      }\n    }\n  };\n\n  /**\n   * Adds a color to the list of recently used background colors.\n   *\n   * Keeps the list to a maximum of 5 colors. Does not include the same color twice.\n   *\n   * @param color The color to save.\n   */\n  private saveRecentBackgroundColor = (color: string) => {\n    const colors = localStorage.getItem('home-message-recent-background-color');\n    if (colors) {\n      const colorsList = JSON.parse(colors);\n      if (colorsList.includes(color)) {\n        return;\n      }\n\n      colorsList.unshift(color);\n      if (colorsList.length > 5) {\n        colorsList.pop();\n      }\n      localStorage.setItem('home-message-recent-background-color', JSON.stringify(colorsList));\n    } else {\n      localStorage.setItem('home-message-recent-background-color', JSON.stringify([color]));\n    }\n  };\n\n  /**\n   * Adds a color to the list of recently used text colors.\n   *\n   * Keeps the list to a maximum of 5 colors. Does not include the same color twice.\n   *\n   * @param color The color to save.\n   */\n  private saveRecentTextColor = (color: string) => {\n    const colors = localStorage.getItem('home-message-recent-text-color');\n    if (colors) {\n      const colorsList = JSON.parse(colors);\n      if (colorsList.includes(color)) {\n        return;\n      }\n\n      colorsList.unshift(color);\n      if (colorsList.length > 5) {\n        colorsList.pop();\n      }\n      localStorage.setItem('home-message-recent-text-color', JSON.stringify(colorsList));\n    } else {\n      localStorage.setItem('home-message-recent-text-color', JSON.stringify([color]));\n    }\n  };\n\n  /**\n   * Returns the list of recently used background colors.\n   */\n  private getRecentBackgroundColors = () => {\n    const colors = localStorage.getItem('home-message-recent-background-color');\n    if (colors) {\n      return JSON.parse(colors);\n    }\n    return [];\n  };\n\n  /**\n   * Returns the list of recently used text colors.\n   */\n  private getRecentTextColors = () => {\n    const colors = localStorage.getItem('home-message-recent-text-color');\n    if (colors) {\n      return JSON.parse(colors);\n    }\n    return [];\n  };\n}\n", "import MessagesController from './MessagesController';\n\nconst c = new MessagesController();\nc.loadMessages();\n"],
  "mappings": "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",
  "names": []
}
