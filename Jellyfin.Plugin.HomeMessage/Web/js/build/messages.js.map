{
  "version": 3,
  "sources": ["../TinyEditor.ts", "../utils.ts", "../MessagesController.ts", "../messages.ts"],
  "sourcesContent": ["/**\n * TinyEditor \u2014 a tiny, dependency-free WYSIWYG editor using contenteditable.\n *\n * Features: Bold, Italic, Strikethrough, Link/Unlink, keyboard shortcuts, paste-as-plain-text,\n * minimal sanitization/normalization on getHTML()/setHTML().\n *\n * Usage:\n *   import TinyEditor from \"./TinyEditor\";\n *\n *   const root = document.getElementById(\"editor\");\n *   const ed = new TinyEditor(root!, { placeholder: \"Type here\u2026\" });\n *\n *   // Programmatic access:\n *   ed.setHTML(\"<p>Hello <strong>world</strong></p>\");\n *   const html = ed.getHTML();\n *\n * HTML scaffold (example):\n *   <div id=\"input-message-toolbar\"></div>\n *   <div id=\"editor\"></div>\n */\nexport default class TinyEditor {\n  /**\n   * THe root element.\n   */\n  private root: HTMLElement;\n\n  /**\n   * The root toolbar element.\n   */\n  private rootToolbar: HTMLElement;\n\n  /**\n   * The toolbar element appended to the root toolbar.\n   */\n  private toolbarEl?: HTMLDivElement;\n\n  /**\n   * The contenteditable element.\n   */\n  private editable!: HTMLDivElement;\n\n  /**\n   * The allowed tags.\n   */\n  private allowedTags = new Set(['STRONG', 'EM', 'S', 'A', 'BR', 'P', 'DIV', 'SPAN', 'U']);\n\n  /**\n   * The options.\n   */\n  private opt: Required<Omit<TinyEditorOptions, 'onChange' | 'initialHTML'>> &\n    Pick<TinyEditorOptions, 'onChange' | 'initialHTML'>;\n\n  /**\n   * Saved selection range.\n   */\n  private savedRange: Range | null = null;\n\n  /**\n   * Constructs a new TinyEditor instance.\n   *\n   * @param root The root input element.\n   * @param rootToolbar The root toolbar element.\n   * @param options The options.\n   */\n  constructor(root: HTMLElement, rootToolbar: HTMLElement, options: TinyEditorOptions = {}) {\n    this.root = root;\n    this.rootToolbar = rootToolbar;\n    this.opt = {\n      placeholder: options.placeholder ?? '',\n      toolbar: options.toolbar ?? true,\n      targetBlank: options.targetBlank ?? true,\n      rel: options.rel ?? 'noopener noreferrer',\n      initialHTML: options.initialHTML,\n      onChange: options.onChange,\n    };\n\n    this.mount();\n  }\n\n  /**\n   * Focuses the editor.\n   */\n  public focus = (): void => {\n    this.editable.focus();\n  };\n\n  /**\n   * Sets the HTML content of the editor.\n   *\n   * @param html The HTML content.\n   */\n  public setHTML = (html: string): void => {\n    const clean = this.cleanHTML(html);\n    this.editable.innerHTML = clean || '';\n    this.togglePlaceholder();\n  };\n\n  /**\n   * Gets the HTML content of the editor.\n   *\n   * Returns normalized & sanitized HTML.\n   */\n  public getHTML = (): string => {\n    return this.cleanHTML(this.editable.innerHTML);\n  };\n\n  /**\n   * Destroys the editor.\n   */\n  public destroy = (): void => {\n    document.removeEventListener('selectionchange', this.onSelectionChange);\n    this.editable.removeEventListener('keydown', this.onKeydown);\n    this.editable.removeEventListener('input', this.onInput);\n    this.editable.removeEventListener('paste', this.onPaste);\n    this.root.innerHTML = '';\n  };\n\n  /**\n   * Mounts the editor.\n   */\n  private mount = (): void => {\n    this.root.classList.add('hm-te');\n\n    if (this.opt.toolbar) {\n      this.toolbarEl = this.buildToolbar();\n      this.rootToolbar.innerHTML = '';\n      this.rootToolbar.appendChild(this.toolbarEl);\n    }\n\n    this.editable = document.createElement('div');\n    this.editable.className = 'hm-te-editable';\n    this.editable.contentEditable = 'true';\n    if (this.opt.placeholder) {\n      this.editable.setAttribute('data-placeholder', this.opt.placeholder);\n    }\n    this.root.appendChild(this.editable);\n\n    // Give focus to the editable when clicking inside the root.\n    this.root.addEventListener('click', (e) => {\n      if (e.target === this.editable || this.editable.contains(e.target as Node)) {\n        return;\n      }\n      if (this.toolbarEl && this.toolbarEl.contains(e.target as Node)) {\n        return;\n      }\n\n      this.editable.focus();\n\n      // Move cursor to the end.\n      const range = document.createRange();\n      range.selectNodeContents(this.editable);\n      range.collapse(false);\n\n      const sel = window.getSelection();\n      if (sel) {\n        sel.removeAllRanges();\n        sel.addRange(range);\n      }\n    });\n\n    document.addEventListener('selectionchange', this.onSelectionChange);\n    this.editable.addEventListener('keydown', this.onKeydown);\n    this.editable.addEventListener('input', this.onInput);\n    this.editable.addEventListener('paste', this.onPaste);\n\n    const initial = this.opt.initialHTML ?? '';\n    if (initial) {\n      this.setHTML(initial);\n    } else {\n      this.togglePlaceholder();\n    }\n  };\n\n  /**\n   * Builds the toolbar.\n   */\n  private buildToolbar = (): HTMLDivElement => {\n    const tb = document.createElement('div');\n    tb.className = 'hm-te-toolbar';\n\n    /**\n     * Creates a button.\n     *\n     * @param label The button label.\n     * @param title The title attribute.\n     * @param cmd The command to execute.\n     * @param extra More command options.\n     */\n    const mkBtn = (label: string, title: string, cmd: string, extra?: (e: MouseEvent) => void) => {\n      const b = document.createElement('button');\n      b.type = 'button';\n      b.className = 'hm-te-btn emby-button raised';\n      b.textContent = label;\n      b.title = title;\n      b.setAttribute('aria-pressed', 'false');\n      b.addEventListener('mousedown', (e) => e.preventDefault()); // keep focus\n      b.addEventListener('click', (e) => {\n        this.editable.focus();\n        if (extra) {\n          extra(e);\n        } else {\n          this.exec(cmd as any);\n        }\n      });\n      b.dataset.cmd = cmd;\n\n      return b;\n    };\n\n    const bBold = mkBtn('B', 'Bold (Ctrl/Cmd+B)', 'bold');\n    bBold.style.fontWeight = 'bold';\n\n    const bItalic = mkBtn('I', 'Italic (Ctrl/Cmd+I)', 'italic');\n    bItalic.style.fontStyle = 'italic';\n\n    const bUnderline = mkBtn('U', 'Underline (Ctrl/Cmd+U)', 'underline');\n    bUnderline.style.textDecoration = 'underline';\n\n    const bStrike = mkBtn('S', 'Strikethrough (Ctrl/Cmd+Shift+S)', 'strikeThrough');\n    bStrike.style.textDecoration = 'line-through';\n\n    const bLink = mkBtn('\uD83D\uDD17', 'Add or edit link (Ctrl/Cmd+K)', 'createlink', () =>\n      this.handleLink(),\n    );\n\n    const bUnlink = mkBtn('\u26D3\uFE0F', 'Remove link', 'unlink', () => this.exec('unlink'));\n\n    tb.append(bBold, bItalic, bUnderline, bStrike, bLink, bUnlink);\n\n    return tb;\n  };\n\n  /**\n   * Executes a command.\n   *\n   * @param cmd The command to execute.\n   * @param value The value to pass to the command.\n   */\n  private exec = (\n    cmd: 'bold' | 'italic' | 'strikeThrough' | 'createLink' | 'underline' | 'unlink',\n    value?: string,\n  ) => {\n    if (!this.isSelectionInEditor()) {\n      return;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    document.execCommand(cmd, false, value);\n    if (cmd === 'createLink') {\n      this.ensureLinkAttrs();\n    }\n    this.updateToolbarState();\n    this.emitChange();\n  };\n\n  /**\n   * Handles a link.\n   */\n  private handleLink = (): void => {\n    if (!this.isSelectionInEditor()) {\n      return;\n    }\n\n    const a = this.closestAnchor();\n    const current = a?.getAttribute('href') || '';\n\n    // Save selection because prompt will blur selection in some browsers\n    this.saveSelection();\n    const url = window.prompt('Link URL (http(s)://, mailto:, tel:)', current || 'https://');\n    this.restoreSelection();\n\n    if (!url) {\n      return; // cancelled\n    }\n\n    if (a) {\n      // Update existing link\n      if (this.isSafeUrl(url)) {\n        a.setAttribute('href', url);\n        this.applyLinkTargetRel(a);\n      } else {\n        // Unsafe \u2014 unwrap the link\n        this.unwrapNode(a);\n      }\n    } else {\n      // Create a link around the selection (or insert new text if collapsed)\n      const sel = window.getSelection();\n      if (!sel) {\n        return;\n      }\n\n      if (sel.isCollapsed) {\n        // Insert the URL text then link it\n        // eslint-disable-next-line deprecation/deprecation\n        document.execCommand('insertText', false, url);\n        // Select the just-inserted text and link it\n        const r = sel.getRangeAt(0);\n        r.setStart(r.startContainer, Math.max(0, r.startOffset - url.length));\n        sel.removeAllRanges();\n        sel.addRange(r);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      document.execCommand('createLink', false, url);\n      this.ensureLinkAttrs();\n    }\n\n    this.emitChange();\n  };\n\n  /**\n   * Ensures link attributes.\n   */\n  private ensureLinkAttrs = (): void => {\n    // Ensure rel/target on current selection's anchor(s)\n    const anchors = this.getAnchorsInSelectionOrParent();\n    anchors.forEach((a) => this.applyLinkTargetRel(a));\n  };\n\n  /**\n   * Applies link target/rel attributes.\n   *\n   * @param a The anchor element.\n   */\n  private applyLinkTargetRel = (a: HTMLAnchorElement): void => {\n    const href = a.getAttribute('href') || '';\n    if (!this.isSafeUrl(href)) {\n      this.unwrapNode(a);\n      return;\n    }\n\n    if (this.opt.targetBlank) {\n      a.setAttribute('target', '_blank');\n    }\n\n    const rel = this.opt.rel.trim();\n    if (rel) {\n      a.setAttribute('rel', rel);\n    }\n  };\n\n  /**\n   * Checks if a URL is safe.\n   *\n   * @param url The URL to check.\n   */\n  private isSafeUrl = (url: string): boolean => {\n    try {\n      const u = new URL(url, window.location.origin);\n      const scheme = u.protocol.replace(':', '').toLowerCase();\n      return ['http', 'https', 'mailto', 'tel'].includes(scheme);\n    } catch {\n      // Treat relative URLs as safe if they don't contain javascript:\n      return !/^\\s*javascript:/i.test(url);\n    }\n  };\n\n  /**\n   * Handles keydown events.\n   *\n   * @param e The event.\n   */\n  private onKeydown = (e: KeyboardEvent) => {\n    const meta = e.ctrlKey || e.metaKey;\n    if (!meta) {\n      return;\n    }\n\n    const key = e.key.toLowerCase();\n    if (key === 'b') {\n      e.preventDefault();\n      this.exec('bold');\n    } else if (key === 'i') {\n      e.preventDefault();\n      this.exec('italic');\n    } else if (key === 'k') {\n      e.preventDefault();\n      this.handleLink();\n    } else if (key === 's' && e.shiftKey) {\n      e.preventDefault();\n      this.exec('strikeThrough');\n    }\n  };\n\n  /**\n   * Handles input events.\n   */\n  private onInput = (): void => {\n    this.togglePlaceholder();\n    this.emitChange();\n  };\n\n  /**\n   * Handles paste events.\n   *\n   * @param e The event.\n   */\n  private onPaste = (e: ClipboardEvent) => {\n    e.preventDefault();\n    const text = e.clipboardData?.getData('text/plain') ?? '';\n    // eslint-disable-next-line deprecation/deprecation\n    document.execCommand('insertText', false, text);\n  };\n\n  /**\n   * Handles selection change events.\n   */\n  private onSelectionChange = (): void => {\n    if (!this.isSelectionInEditor() || !this.toolbarEl) {\n      return;\n    }\n    this.updateToolbarState();\n  };\n\n  /**\n   * Updates the toolbar state.\n   */\n  private updateToolbarState = (): void => {\n    if (!this.toolbarEl) {\n      return;\n    }\n\n    const states: Record<string, boolean> = {\n      // eslint-disable-next-line deprecation/deprecation\n      bold: document.queryCommandState('bold'),\n      // eslint-disable-next-line deprecation/deprecation\n      italic: document.queryCommandState('italic'),\n      // eslint-disable-next-line deprecation/deprecation\n      strikeThrough: document.queryCommandState('strikeThrough'),\n    };\n\n    this.toolbarEl.querySelectorAll<HTMLButtonElement>('.hm-te-btn').forEach((btn) => {\n      const cmd = btn.dataset.cmd || '';\n      const active = (states as any)[cmd] || (cmd === 'createlink' && !!this.closestAnchor());\n      btn.setAttribute('aria-pressed', active ? 'true' : 'false');\n    });\n  };\n\n  /**\n   * Emits a change event.\n   */\n  private emitChange = (): void => {\n    if (this.opt.onChange) {\n      this.opt.onChange(this.getHTML());\n    }\n  };\n\n  /**\n   * Toggles the placeholder.\n   */\n  private togglePlaceholder = (): void => {\n    if (!this.opt.placeholder) {\n      return;\n    }\n\n    const text = this.editable.textContent?.trim() ?? '';\n    if (text.length === 0 && this.editable.innerHTML.replace(/<br\\s*\\/?>/gi, '').trim() === '') {\n      this.editable.setAttribute('data-empty', 'true');\n    } else {\n      this.editable.removeAttribute('data-empty');\n    }\n  };\n\n  /**\n   * Checks if the selection is in the editor.\n   */\n  private isSelectionInEditor = (): boolean => {\n    const sel = window.getSelection();\n    if (!sel || sel.rangeCount === 0) {\n      return false;\n    }\n\n    const { anchorNode, focusNode } = sel;\n    return (\n      !!(anchorNode && this.editable.contains(anchorNode)) ||\n      !!(focusNode && this.editable.contains(focusNode))\n    );\n  };\n\n  /**\n   * Saves the selection.\n   */\n  private saveSelection = (): void => {\n    const sel = window.getSelection();\n    if (sel && sel.rangeCount > 0) {\n      this.savedRange = sel.getRangeAt(0).cloneRange();\n    }\n  };\n\n  /**\n   * Restores the selection.\n   */\n  private restoreSelection = (): void => {\n    if (!this.savedRange) {\n      return;\n    }\n\n    const sel = window.getSelection();\n    if (!sel) {\n      return;\n    }\n\n    sel.removeAllRanges();\n    sel.addRange(this.savedRange);\n    this.savedRange = null;\n  };\n\n  /**\n   * Gets the closest anchor element.\n   */\n  private closestAnchor = (): HTMLAnchorElement | null => {\n    const sel = window.getSelection();\n    if (!sel || sel.rangeCount === 0) {\n      return null;\n    }\n\n    let node: Node | null = sel.anchorNode;\n    while (node && node !== this.editable) {\n      if (node instanceof HTMLAnchorElement) return node;\n      node = node.parentNode;\n    }\n\n    return null;\n  };\n\n  /**\n   * Gets the anchors in the selection or parent.\n   */\n  private getAnchorsInSelectionOrParent = (): HTMLAnchorElement[] => {\n    const sel = window.getSelection();\n    if (!sel || sel.rangeCount === 0) {\n      return [];\n    }\n\n    const r = sel.getRangeAt(0);\n    const container =\n      r.commonAncestorContainer instanceof Element\n        ? r.commonAncestorContainer\n        : r.commonAncestorContainer.parentElement;\n    if (!container) {\n      return [];\n    }\n\n    const anchors = new Set<HTMLAnchorElement>();\n    // If selection is inside a single anchor\n    const a = this.closestAnchor();\n    if (a) {\n      anchors.add(a);\n    }\n\n    // Also gather any anchors fully/partially within the range\n    container.querySelectorAll('a').forEach((el) => {\n      const rects = (el as HTMLElement).getClientRects();\n      if (rects.length) {\n        anchors.add(el as HTMLAnchorElement);\n      }\n    });\n\n    return Array.from(anchors);\n  };\n\n  /**\n   * Cleans HTML.\n   *\n   * @param input The input HTML.\n   */\n  private cleanHTML = (input: string): string => {\n    const tmp = document.createElement('div');\n    tmp.innerHTML = input;\n\n    /**\n     * Normalizes a node.\n     *\n     * @param node The node.\n     */\n    const normalize = (node: Node) => {\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        const el = node as HTMLElement;\n        const tag = el.tagName;\n\n        // Map deprecated tags\n        if (tag === 'B') {\n          this.replaceTag(el, 'STRONG');\n        } else if (tag === 'I') {\n          this.replaceTag(el, 'EM');\n        } else if (tag === 'STRIKE' || tag === 'DEL') {\n          this.replaceTag(el, 'S');\n        }\n\n        const current = el.tagName;\n        if (!this.allowedTags.has(current)) {\n          // unwrap node, keep children\n          const parent = el.parentNode;\n          while (el.firstChild) {\n            parent?.insertBefore(el.firstChild, el);\n          }\n\n          parent?.removeChild(el);\n          return; // children were moved; no need to descend into el\n        }\n\n        // Attributes: only allow href/rel/target on <a>\n        if (current === 'A') {\n          [...el.attributes].forEach((attr) => {\n            if (!['href', 'rel', 'target'].includes(attr.name)) el.removeAttribute(attr.name);\n          });\n          const href = el.getAttribute('href') || '';\n          if (!this.isSafeUrl(href)) {\n            this.unwrapNode(el);\n          } else {\n            this.applyLinkTargetRel(el as HTMLAnchorElement);\n          }\n        } else {\n          // Strip all attributes on other tags\n          [...el.attributes].forEach((attr) => el.removeAttribute(attr.name));\n        }\n      }\n\n      // Recurse\n      let child = node.firstChild;\n      while (child) {\n        const next = child.nextSibling;\n        normalize(child);\n        child = next;\n      }\n    };\n\n    normalize(tmp);\n\n    // Trim leading/trailing whitespace-only nodes\n    return tmp.innerHTML.replace(/\\s+data-empty=\\\"true\\\"/g, '').trim();\n  };\n\n  /**\n   * Replaces a tag.\n   *\n   * @param el The element.\n   * @param newTag The new tag.\n   */\n  private replaceTag = (el: HTMLElement, newTag: string): void => {\n    const repl = document.createElement(newTag);\n    while (el.firstChild) {\n      repl.appendChild(el.firstChild);\n    }\n    el.replaceWith(repl);\n  };\n\n  /**\n   * Unwraps a node.\n   *\n   * @param el The element.\n   */\n  private unwrapNode = (el: Element): void => {\n    const parent = el.parentNode;\n    if (!parent) {\n      return;\n    }\n\n    while (el.firstChild) {\n      parent.insertBefore(el.firstChild, el);\n    }\n    parent.removeChild(el);\n  };\n}\n\n/**\n * TinyEditor options.\n */\nexport interface TinyEditorOptions {\n  /**\n   * The placeholder text.\n   */\n  placeholder?: string;\n\n  /**\n   * Whether to show the toolbar.\n   */\n  toolbar?: boolean;\n\n  /**\n   * The target blank attribute.\n   */\n  targetBlank?: boolean;\n\n  /**\n   * The rel attribute.\n   */\n  rel?: string;\n\n  /**\n   * The initial HTML.\n   */\n  initialHTML?: string;\n\n  /**\n   * The onChange callback.\n   */\n  onChange?: (html: string) => void;\n}\n", "/**\n * Creates a new element.\n *\n * @param tagName The tag name of the element to create.\n * @param attributes The attributes to set on the element.\n */\nexport const createElement = (\n  tagName: string,\n  attributes: Record<string, string | HTMLElement[] | DocumentFragment> = {},\n): HTMLElement => {\n  const el = document.createElement(tagName);\n\n  const attr = Object.assign({}, attributes);\n  if (attr.html) {\n    setHTML(el, attr.html);\n    delete attr.html;\n  }\n\n  const keys = Object.keys(attr);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = attr[key];\n    if (typeof value === 'string') {\n      el.setAttribute(key, value);\n    }\n  }\n\n  return el;\n};\n\ntype Primitive = string | File;\ntype FormValue = Primitive | Primitive[];\ntype FormObject = Record<string, FormValue>;\n\n/**\n * Serializes a form into a FormData object.\n *\n * @param form The form to serialize.\n */\nexport function formValuesAll(form: HTMLFormElement): FormObject {\n  const fd = new FormData(form);\n  const obj: FormObject = {};\n  // De-duplicate keys, then decide single vs array\n  for (const name of new Set(fd.keys() as Iterable<string>)) {\n    const all = fd.getAll(name); // (string | File)[]\n    obj[name] = all.length > 1 ? all : all[0]!;\n  }\n\n  return obj;\n}\n\n/**\n * Sets the inner HTML of an element.\n *\n * @param el The element.\n * @param html The HTML to set.\n */\nexport function setHTML(el: HTMLElement | null, html: string | HTMLElement[] | DocumentFragment) {\n  if (!el) {\n    return;\n  }\n\n  if (typeof html === 'string') {\n    el.innerHTML = html;\n    return;\n  }\n\n  if (Array.isArray(html)) {\n    el.innerHTML = '';\n    for (let i = 0; i < html.length; i++) {\n      el.appendChild(html[i]);\n    }\n    return;\n  }\n\n  el.innerHTML = '';\n  el.appendChild(html);\n}\n\n/**\n * Sets the value of an input element.\n *\n * @param el The form element.\n * @param value The value to set.\n */\nexport function setValue(el: HTMLInputElement | HTMLSelectElement | null, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.value = value;\n}\n\n/**\n * Sets the checked state of an input element.\n *\n * @param el The form element.\n * @param checked The value to set.\n */\nexport function setChecked(el: HTMLInputElement | null, checked: boolean) {\n  if (!el) {\n    return;\n  }\n\n  el.checked = checked;\n}\n\n/**\n * Sets the value of an attribute on an element.\n *\n * @param el The element.\n * @param name The attribute name.\n * @param value The value to set.\n */\nexport function setAttribute(el: HTMLElement | null, name: string, value: string) {\n  if (!el) {\n    return;\n  }\n\n  el.setAttribute(name, value);\n}\n\n/**\n * Build <p> nodes from text with line breaks.\n * - Blank lines separate paragraphs (default).\n * - Single newlines inside a paragraph become <br>.\n *\n * SECURITY: If you set allowHtml=true, make sure the input is trusted or sanitized.\n */\nexport function paragraphsFromText(\n  text: string,\n  opts: {\n    mode?: 'blankLineIsParagraph' | 'everyLineIsParagraph';\n    keepEmpty?: boolean;\n    className?: string;\n    doc?: Document;\n    allowHtml?: boolean;\n  } = {},\n): DocumentFragment {\n  const {\n    mode = 'blankLineIsParagraph',\n    keepEmpty = false,\n    className,\n    doc = document,\n    allowHtml = true,\n  } = opts;\n\n  const frag = doc.createDocumentFragment();\n  if (text == null) return frag;\n\n  // Normalize line endings.\n  const normalized = String(text).replace(/\\r\\n?/g, '\\n');\n\n  // Determine paragraph chunks.\n  const chunks =\n    mode === 'everyLineIsParagraph' ? normalized.split('\\n') : normalized.split(/\\n{2,}/); // one or more blank lines = new paragraph\n\n  // Helper: append HTML (or text) to a node.\n  const appendContent = (parent: Element, content: string) => {\n    if (!allowHtml) {\n      parent.appendChild(doc.createTextNode(content));\n      return;\n    }\n    // Parse as HTML safely via <template> (scripts won't execute during parse).\n    const tpl = doc.createElement('template');\n    tpl.innerHTML = content;\n    parent.appendChild(tpl.content);\n  };\n\n  for (const raw of chunks) {\n    const paraText = mode === 'everyLineIsParagraph' ? raw : raw.replace(/\\n+$/g, ''); // trim trailing \\n inside a paragraph only\n    if (!keepEmpty && /^\\s*$/.test(paraText)) continue;\n\n    const p = doc.createElement('p');\n    if (className) p.className = className;\n\n    if (mode === 'everyLineIsParagraph') {\n      // Whole line is a paragraph.\n      appendContent(p, paraText);\n    } else {\n      // Inside a paragraph, single newlines become <br>.\n      const lines = paraText.split('\\n');\n      lines.forEach((line, i) => {\n        if (i > 0) p.appendChild(doc.createElement('br'));\n        appendContent(p, line);\n      });\n    }\n\n    frag.appendChild(p);\n  }\n\n  return frag;\n}\n", "import { Message, MessageInput } from './@types/Message';\nimport TinyEditor from './TinyEditor';\nimport {\n  formValuesAll,\n  setHTML,\n  setValue,\n  setChecked,\n  setAttribute,\n  paragraphsFromText,\n} from './utils';\n\nconst { ApiClient, Dashboard } = window;\n\n/**\n * Controls the messages page.\n *\n * @see https://github.com/jellyfin-archive/jellyfin-apiclient-javascript\n * @see https://github.com/jellyfin/jellyfin-web/blob/808ece5db48b40bcf841e99c96adf5b8213d77e3/src/utils/dashboard.js#L236\n */\nexport default class MessagesController {\n  /**\n   * The messages.\n   */\n  private messages: Message[] = [];\n\n  /**\n   * The message form.\n   */\n  private form!: HTMLFormElement;\n\n  /**\n   * The message editor.\n   */\n  private editor!: TinyEditor;\n\n  /**\n   * The recent background colors list.\n   */\n  private recentBackgroundColorsList!: HTMLUListElement;\n\n  /**\n   * The recent text colors list.\n   */\n  private recentTextColorsList!: HTMLUListElement;\n\n  /**\n   * Initializes a new instance of the HomeMessageConfig class.\n   */\n  constructor() {\n    this.recentBackgroundColorsList = document.getElementById(\n      'home-message-recent-colors-list-bg',\n    ) as HTMLUListElement;\n    this.recentTextColorsList = document.getElementById(\n      'home-message-recent-colors-list-text',\n    ) as HTMLUListElement;\n\n    this.form = document.getElementById('home-message-message-form') as HTMLFormElement;\n    this.form.addEventListener('submit', this.saveMessage);\n\n    const input = document.getElementById('input-message') as HTMLDivElement;\n    const toolbar = document.getElementById('input-message-toolbar') as HTMLDivElement;\n    this.editor = new TinyEditor(input, toolbar);\n\n    this.resetForm();\n  }\n\n  /**\n   * Loads the existing messages from the server.\n   */\n  public loadMessages = () => {\n    this.ajax('GET', 'admin/messages').then((messages: Message[]) => {\n      this.messages = messages;\n      this.renderMessages();\n      this.renderRecentColors();\n    });\n  };\n\n  /**\n   * Creates and updates a message.\n   *\n   * @param e The event.\n   */\n  public saveMessage = (e: Event) => {\n    e.preventDefault();\n\n    const values = formValuesAll(this.form);\n    const message: MessageInput = {\n      Title: (values.title || '').toString(),\n      Text: this.editor.getHTML(),\n      BgColor: (values.bgColor || '').toString(),\n      TextColor: (values.textColor || '').toString(),\n      Dismissible: (values.dismissible && values.dismissible) === 'on',\n      TimeStart: values.timeStart ? new Date(values.timeStart.toString()).getTime() / 1000 : null,\n      TimeEnd: values.timeEnd ? new Date(values.timeEnd.toString()).getTime() / 1000 : null,\n    };\n\n    console.log('message', message);\n\n    this.saveRecentBackgroundColor(message.BgColor);\n    this.saveRecentTextColor(message.TextColor);\n\n    const isExisting = !!values.id;\n    const url = isExisting ? `admin/messages/${values.id}` : 'admin/messages';\n    this.ajax('POST', url, message).then(() => {\n      this.resetForm();\n      this.loadMessages();\n      Dashboard.alert(isExisting ? 'Message updated' : 'Message added');\n    });\n  };\n\n  /**\n   * Renders the messages.\n   */\n  private renderMessages = () => {\n    const template = document.getElementById('home-message-item-template') as HTMLTemplateElement;\n    const messages = document.getElementById('home-message-messages') as HTMLUListElement;\n    messages.innerHTML = '';\n\n    for (let i = 0; i < this.messages.length; i++) {\n      const message = this.messages[i];\n      const createdDate = new Date(message.CreatedTime * 1000);\n\n      const li = template.content.cloneNode(true) as HTMLElement;\n      setAttribute(\n        li.querySelector('.home-message-messages-item-body'),\n        'style',\n        `background-color: ${message.BgColor}; color: ${message.TextColor}`,\n      );\n      setAttribute(li.querySelector('[data-message-id]'), 'data-message-id', message.Id);\n      setHTML(li.querySelector('h4'), message.Title);\n      setHTML(\n        li.querySelector('time'),\n        `${createdDate.toLocaleDateString()} ${createdDate.toLocaleTimeString()}`,\n      );\n      setHTML(\n        li.querySelector('.home-message-messages-item-text'),\n        paragraphsFromText(message.Text),\n      );\n\n      messages.appendChild(li);\n    }\n\n    const editBtns = document.getElementsByClassName(\n      'home-message-messages-item-heading-edit-btn',\n    ) as HTMLCollectionOf<HTMLButtonElement>;\n    for (let i = 0; i < editBtns.length; i++) {\n      const btn = editBtns[i];\n      btn.addEventListener('click', this.editMessage);\n    }\n\n    const closeBtns = document.getElementsByClassName(\n      'home-message-messages-item-heading-close-btn',\n    ) as HTMLCollectionOf<HTMLButtonElement>;\n    for (let i = 0; i < closeBtns.length; i++) {\n      const btn = closeBtns[i];\n      btn.addEventListener('click', this.deleteMessage);\n    }\n  };\n\n  /**\n   * Edits a message.\n   *\n   * @param e The event.\n   */\n  private editMessage = (e: Event) => {\n    e.preventDefault();\n\n    const btn = e.currentTarget as HTMLButtonElement;\n    const parent = btn.closest('[data-message-id]') as HTMLElement;\n    const messageId = parent?.dataset.messageId;\n    if (!messageId) {\n      return;\n    }\n    const message = this.messages.find((m) => m.Id === messageId);\n    if (!message) {\n      return;\n    }\n\n    this.resetForm();\n    const submitBtn = document.querySelector('#home-message-submit-btn span') as HTMLElement;\n    submitBtn.textContent = 'Update';\n\n    setValue(this.form.querySelector('input[name=\"id\"]'), message.Id);\n    setValue(this.form.querySelector('input[name=\"title\"]'), message.Title);\n    setValue(this.form.querySelector('input[name=\"bgColor\"]'), message.BgColor);\n    setValue(this.form.querySelector('input[name=\"textColor\"]'), message.TextColor);\n    setChecked(this.form.querySelector('input[name=\"dismissible\"]'), message.Dismissible);\n    this.editor.setHTML(message.Text);\n\n    this.form.scrollIntoView({\n      behavior: 'smooth',\n      block: 'start',\n    });\n  };\n\n  /**\n   * Deletes a message.\n   *\n   * @param e The event.\n   */\n  private deleteMessage = (e: Event) => {\n    e.preventDefault();\n\n    const btn = e.currentTarget as HTMLButtonElement;\n    const parent = btn.closest('[data-message-id]') as HTMLElement;\n    const messageId = parent?.dataset.messageId;\n    if (!messageId) {\n      return;\n    }\n\n    Dashboard.confirm(\n      'Are you sure you want to delete this message?',\n      'Delete Message',\n      (result) => {\n        if (result) {\n          this.ajax('DELETE', `admin/messages/${messageId}`).then(() => {\n            this.loadMessages();\n            Dashboard.alert('Message deleted');\n          });\n        }\n      },\n    );\n  };\n\n  /**\n   * Makes an AJAX request.\n   *\n   * @param method The HTTP method to use.\n   * @param path The URL to make the request to.\n   * @param data The data to send.\n   */\n  private ajax = async (method: 'GET' | 'POST' | 'PUT' | 'DELETE', path: string, data?: any) => {\n    Dashboard.showLoadingMsg();\n    return await ApiClient.ajax({\n      type: method,\n      url: ApiClient.getUrl(`HomeMessage/${path}`),\n      dataType: 'json',\n      contentType: 'application/json; charset=utf-8',\n      data: JSON.stringify(data),\n      headers: {\n        accept: 'application/json',\n      },\n    })\n      .catch((error: any) => {\n        console.error(error);\n        Dashboard.alert(error.toString());\n      })\n      .finally(() => {\n        Dashboard.hideLoadingMsg();\n      });\n  };\n\n  /**\n   * Resets the form.\n   */\n  private resetForm = () => {\n    this.form.reset();\n    setValue(this.form.querySelector('input[name=\"bgColor\"]'), '#333333');\n    setValue(this.form.querySelector('input[name=\"textColor\"]'), '#ffffff');\n    setChecked(this.form.querySelector('input[name=\"dismissible\"]'), true);\n    this.editor.setHTML('');\n\n    const submitBtn = document.querySelector('#home-message-submit-btn span') as HTMLElement;\n    submitBtn.textContent = 'Add';\n  };\n\n  /**\n   * Renders the recent colors.\n   */\n  private renderRecentColors = () => {\n    const backgroundColors = this.getRecentBackgroundColors();\n    const textColors = this.getRecentTextColors();\n\n    this.recentBackgroundColorsList.innerHTML = '';\n    if (backgroundColors.length === 0) {\n      this.recentBackgroundColorsList.style.display = 'none';\n    } else {\n      this.recentBackgroundColorsList.style.display = 'block';\n      for (let i = 0; i < backgroundColors.length; i++) {\n        const color = backgroundColors[i];\n        const li = document.createElement('li');\n        li.title = 'Select color';\n        li.style.backgroundColor = color;\n        li.classList.add('home-message-recent-colors-item');\n        li.addEventListener('click', () => {\n          setValue(this.form.querySelector('input[name=\"bgColor\"]'), color);\n        });\n        this.recentBackgroundColorsList.appendChild(li);\n      }\n    }\n\n    this.recentTextColorsList.innerHTML = '';\n    if (textColors.length === 0) {\n      this.recentTextColorsList.style.display = 'none';\n    } else {\n      this.recentTextColorsList.style.display = 'block';\n      for (let i = 0; i < textColors.length; i++) {\n        const color = textColors[i];\n        const li = document.createElement('li');\n        li.title = 'Select color';\n        li.style.backgroundColor = color;\n        li.classList.add('home-message-recent-colors-item');\n        li.addEventListener('click', () => {\n          setValue(this.form.querySelector('input[name=\"textColor\"]'), color);\n          this.saveRecentTextColor(color);\n        });\n        this.recentTextColorsList.appendChild(li);\n      }\n    }\n  };\n\n  /**\n   * Adds a color to the list of recently used background colors.\n   *\n   * Keeps the list to a maximum of 5 colors. Does not include the same color twice.\n   *\n   * @param color The color to save.\n   */\n  private saveRecentBackgroundColor = (color: string) => {\n    const colors = localStorage.getItem('home-message-recent-background-color');\n    if (colors) {\n      const colorsList = JSON.parse(colors);\n      if (colorsList.includes(color)) {\n        return;\n      }\n\n      colorsList.unshift(color);\n      if (colorsList.length > 5) {\n        colorsList.pop();\n      }\n      localStorage.setItem('home-message-recent-background-color', JSON.stringify(colorsList));\n    } else {\n      localStorage.setItem('home-message-recent-background-color', JSON.stringify([color]));\n    }\n  };\n\n  /**\n   * Adds a color to the list of recently used text colors.\n   *\n   * Keeps the list to a maximum of 5 colors. Does not include the same color twice.\n   *\n   * @param color The color to save.\n   */\n  private saveRecentTextColor = (color: string) => {\n    const colors = localStorage.getItem('home-message-recent-text-color');\n    if (colors) {\n      const colorsList = JSON.parse(colors);\n      if (colorsList.includes(color)) {\n        return;\n      }\n\n      colorsList.unshift(color);\n      if (colorsList.length > 5) {\n        colorsList.pop();\n      }\n      localStorage.setItem('home-message-recent-text-color', JSON.stringify(colorsList));\n    } else {\n      localStorage.setItem('home-message-recent-text-color', JSON.stringify([color]));\n    }\n  };\n\n  /**\n   * Returns the list of recently used background colors.\n   */\n  private getRecentBackgroundColors = () => {\n    const colors = localStorage.getItem('home-message-recent-background-color');\n    if (colors) {\n      return JSON.parse(colors);\n    }\n    return [];\n  };\n\n  /**\n   * Returns the list of recently used text colors.\n   */\n  private getRecentTextColors = () => {\n    const colors = localStorage.getItem('home-message-recent-text-color');\n    if (colors) {\n      return JSON.parse(colors);\n    }\n    return [];\n  };\n}\n", "import MessagesController from './MessagesController';\n\nconst c = new MessagesController();\nc.loadMessages();\n"],
  "mappings": "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",
  "names": []
}
